253. Meeting Rooms II

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length == 0 || intervals[0].length == 0) return 0;
    
        Arrays.sort(intervals,(a,b)-> a[0] - b[0]);
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a,b)-> a[1] - b[1]); // this represent number of meeting room we need
        int result = 0;
        
        for(int[] m : intervals){
            minHeap.add(m);
            // condition for when we should remove a meeting room out of priority queue
             while(!minHeap.isEmpty() && minHeap.peek()[1] <= m[0]){
                minHeap.poll();
            }
            result = Math.max(result, minHeap.size());
        }
        return result;
    }
}
