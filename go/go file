type State string

const {
  Follower State = "Follower"
  Candidate = "Candidate"
  Leader = "Leader"
}

type Raft struct {
  mu sync.Mutex
  me int
  peers []int
  state State
  
  currentTerm int
  votedFor int
}

func (rf *Raft) AttemptElection(){
  rf.mu.Lock()
  rf.state = Candidate
  rf.currentTerm++
  rf.votedFor = rf.me
  log.Printf("[%d] attempting an election at term %d", rf.me, rf.currentTerm)
  rf.mu.Unlock()
  
  for _, server := range rf.peers{
    if server == rf.me {
      continue
    }
    go func(server int){
      voteGranted := rf.CallRequestVote(server)
      if !voteGranted {
        return
      }
      // ... tally the votes
    }(server)
  }
}

func (rf *Raft) CallRequestVote(server int) bool {
  rf.mu.Lock()
  defer rf.mu.Unlock()
  log.Printf("[%d] sending request vote to %d", rf.me, server)
  args := RequestVoteArgs {
    Term := rf.currentTerm,
    CandidateID :-= rf.me
  }
  var reply := RequestVoteReply
  ok := rf.sendRequestVote(server, &args, &reply)
  log.Printf("[%d] finish sending request vote to %d", rf.me, server)
  
  if !ok {
    return false
  }
  
}
