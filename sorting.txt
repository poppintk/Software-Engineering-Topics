
912. Sort an Array
//merge sort
class Solution {
    public List<Integer> sortArray(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
    // note: startIndex, endIndex
    public List<Integer> mergeSort(int[] nums,int startIndex, int endIndex){
       List<Integer> res;
       if (endIndex == startIndex)  return Arrays.asList(nums[startIndex]);
       int midIndex = (startIndex + endIndex)/2;
       
       // divide
       List<Integer> left = mergeSort(nums,startIndex,midIndex);
       List<Integer> right = mergeSort(nums,midIndex + 1,endIndex);

       // merge
       int l = 0;
       int r = 0;
       res = new ArrayList<>();
       while(l < left.size() && r < right.size()){
            if(left.get(l) > right.get(r)){
                res.add(right.get(r));
                r++;
            }else{
                res.add(left.get(l));
                l++;
            }
        }
        while(l < left.size()){
            res.add(left.get(l));
            l++;
        }
        while(r < right.size()){
            res.add(right.get(r));
            r++;
        }
        return res;
    }
}

// quick sort

ys free APIs.
LEARN MORE
HIDE AD • AD VIA BUYSELLADS
GeeksforGeeks
Skip to content
Tutorialskeyboard_arrow_down Studentskeyboard_arrow_down Courses
Custom Search

Login
Hire with us!
▲
Count Inversions in an array | Set 1 (Using Merge Sort)
Merge Sort
QuickSort
Find an N x N grid whose xor of every row and column is equal
Significant Inversions in an Array

 
perm_identity
QuickSort
Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.

Always pick first element as pivot.
Always pick last element as pivot (implemented below)
Pick a random element as pivot.
Pick median as pivot.
The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time.

Pseudo Code for recursive QuickSort function :



 



 

/* low  --> Starting index,  high  --> Ending index */
quickSort(arr[], low, high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[pi] is now
           at right place */
        pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);  // Before pi
        quickSort(arr, pi + 1, high); // After pi
    }
}
quicksort

Partition Algorithm
There can be many ways to do partition, following pseudo code adopts the method given in CLRS book. The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element.

/* low  --> Starting index,  high  --> Ending index */
quickSort(arr[], low, high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[pi] is now
           at right place */
        pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);  // Before pi
        quickSort(arr, pi + 1, high); // After pi
    }
}
Pseudo code for partition()

/* This function takes last element as pivot, places
   the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right
   of pivot */
partition (arr[], low, high)
{
    // pivot (Element to be placed at right position)
    pivot = arr[high];  
 
    i = (low - 1)  // Index of smaller element

    for (j = low; j <= high- 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++;    // increment index of smaller element
            swap arr[i] and arr[j]
        }
    }
    swap arr[i + 1] and arr[high])
    return (i + 1)
}



// Java program for implementation of QuickSort 
class QuickSort { 
    int partition(int arr[], int low, int high) { 
        int pivot = arr[high];  
        int i = (low-1); // index of smaller element 
        for (int j=low; j<high; j++){ 
            // If current element is smaller than the pivot 
            if (arr[j] < pivot) { 
                i++; 
  
                // swap arr[i] and arr[j] 
                int temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp; 
            } 
        } 
  
        // swap arr[i+1] and arr[high] (or pivot) 
        int temp = arr[i+1]; 
        arr[i+1] = arr[high]; 
        arr[high] = temp; 
  
        return i+1; 
    } 
  
  
    /* The main function that implements QuickSort() 
      arr[] --> Array to be sorted, 
      low  --> Starting index, 
      high  --> Ending index */
    void sort(int arr[], int low, int high){ 
        if (low < high){ 
            /* pi is partitioning index, arr[pi] is  
              now at right place */
            int pi = partition(arr, low, high); 
  
            // Recursively sort elements before 
            // partition and after partition 
            sort(arr, low, pi-1); 
            sort(arr, pi+1, high); 
        } 
    } 

