
912. Sort an Array
//merge sort
class Solution {
    public List<Integer> sortArray(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
    // note: startIndex, endIndex
    public List<Integer> mergeSort(int[] nums,int startIndex, int endIndex){
       List<Integer> res;
       if (endIndex == startIndex)  return Arrays.asList(nums[startIndex]);
       int midIndex = (startIndex + endIndex)/2;
       
       // divide
       List<Integer> left = mergeSort(nums,startIndex,midIndex);
       List<Integer> right = mergeSort(nums,midIndex + 1,endIndex);

       // merge
       int l = 0;
       int r = 0;
       res = new ArrayList<>();
       while(l < left.size() && r < right.size()){
            if(left.get(l) > right.get(r)){
                res.add(right.get(r));
                r++;
            }else{
                res.add(left.get(l));
                l++;
            }
        }
        while(l < left.size()){
            res.add(left.get(l));
            l++;
        }
        while(r < right.size()){
            res.add(right.get(r));
            r++;
        }
        return res;
    }
}

// quick sort
/* This function takes last element as pivot, places
   the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right
   of pivot */
// Java program for implementation of QuickSort 
class QuickSort { 
    int partition(int arr[], int low, int high) { 
        int pivot = arr[high];  
        int i = (low-1); // index of smaller element 
        for (int j=low; j<high; j++){ 
            // If current element is smaller than the pivot 
            if (arr[j] < pivot) { 
                i++; 
                // swap arr[i] and arr[j] 
                int temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp; 
            } 
        } 
  
        // swap arr[i+1] and arr[high] (or pivot) 
        int temp = arr[i+1]; 
        arr[i+1] = arr[high]; 
        arr[high] = temp; 
  
        return i+1; 
    } 
  
  
    /* The main function that implements QuickSort() 
      arr[] --> Array to be sorted, 
      low  --> Starting index, 
      high  --> Ending index */
    void sort(int arr[], int low, int high){ 
        if(low >= high) return;

        int pi = partition(arr, low, high); // edge case low + 1 = high 
        sort(arr, low, pi-1); // not includes pi
        sort(arr, pi+1, high); // not includes pi

    }
  }
  // kth statistical element
  public static int kthSmallest(int[] arr, int low,  
                                  int high, int k) { 
        // find the partition  
        int partition = partition(arr,low,high); 
  
        // if partition value is equal to the kth position,  
        // return value at k. 
        if(partition == k) 
            return arr[partition];     
        // if partition value is less than kth position, 
        // search right side of the array. 
        else if(partition < k ) 
            return kthSmallest(arr, partition + 1, high, k ); 
              
        // if partition value is more than kth position,  
        // search left side of the array. 
        else
            return kthSmallest(arr, low, partition-1, k );          
    } 

