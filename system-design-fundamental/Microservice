Service Discovery and Service Register
  WHY? to simplify the RPC
  - Eureka (stopped)
    - Service Register
      Registering services information(i.e. service name and IP address) into Eureka server
    - Service Discovery
      Get service information(i.e. Map, key is service name and value is IP address) from the Eureka 
    - Resilence 
      - More instances of Eureka service register each other, and require all microservice register to all Eureka during service initialiation
      - AP(CAP) JAVA
      
    1) Start Eureka server
    2) Start microservices and reigster them into Eureka with service name
    3) Consumer services use target service name to get RPC call remote server IP address
    4ï¼‰After get the IP address of removed microservice then use HttpClient call the remove service
    5) Consumer will cache IP address in its JVM memory, by default it will be refreshed 30 seconds
  
  - Zookeeper
    - CP(CAP) JAVA
    
  - Consul
    - CP(CAP) GO
    
  - Nacos
 
  
Service Bus
  What? Bus support two Message Queue Broker, RabbitMQ and Kafka
  
  - Nacos

Service Configuration Center
  Config Server (for Application.yml)
  - Spring Cloud Config
    - Client side
    - Server side: Config Server + git(keep tracking config change history)
    - How to resolve client dynamically refetch changes in git repo?
      - add actuator dependency to client pom.xml
      - @RefreshScope in client
      - requires manually make POST call to client side
 
  - Nacos
  
Circuit Break & Rate Limiter & Service Fallback
  - Hystrix(stopped)
    - service consumer and service producer all require Hystrix for their API
    - fallback trigger when current API exception occurs or dependencies service timeout
    
  - resilience4j (popular in NA)
  - Sentinel
       Circuit Break
          Service on its maximum throughput capacity, it will stop service then call the fallback method to give friendly message
          - process
            - trigger break and stop service then trigger fallback
            - recover service

       Fallback
          Service not able to execute in normal processing piepline and instead, it will return fallback message/data to all callers.
          i.e. Service currently not available please retry soon
          Use cases:
            - program exception
            - timeout
            - Circuit Break trigger Service fallback
            - threadPool/semaphore full also trigger fallback

        Circut Breaker vs Fallback
          same:
            - for availability and reliability, stoping the service
            - user eventually all see some part of feature unavailable
          difference:
            - Circuit breaker is callee on issue, then trigger base on the rule
            - downgrade for entire system concerns, stop some service to release resource


        RateLimiter:
          constraint on traffic controll, like 1000 QPS

  
Service Gateway
  - Zuul (Stopped)
  
  - Spring Gateway
    WHAT? Client send request to pring cloud gateway, then Gateway handler Mapping find the matched route by predicate, and sent request to gateway web handler
      web handler will base on the filter chain to request to actual service to execute the logic then return 
      NOTE: Filer has two kinds of filter chains
        
    - Route
    - Predicate
      - Supported Operation
        Before, After, Between, Cookie, Header, Host, Method, Path, Query
    - Filter (can use for modifing the before request and after request)
      - Lifecyle
        - pre
          used for validate paramaters, permission checking, traffic monitoring, log output and potocol transfer
        - post
          used for formatting response body, formatting response header, log output and trafic monitoring
       
      - Types
        - GatewayFilter
        - GlobalFilter
      
      - Customize Filter
        implements GlobalFilter, Ordered
      
    - Example:
      gateway:
        routes:
          - id: ware_route
            uri: lb://gulimall-ware
            predicates:
              - Path=/api/member/**
            filters:
              - RewritePath=/api/(?<segment>.*), /$\{segment}  

Service Call
  - RestTemplate
    ClientHTTP lib
  - Ribbon (in maintence, open feign has integrated Ribbon)
    - local load balancer(Balance load over microservices) VS Nginx (Balance load over the servers)
    - scope: in microservice client side to enable loadbalance 
      how?
        - get all avaible service(i.e. IP address) from the Service Dicovery Center
        - it provides Round Robin, Random....
          Round Robin
            - index = current_count % number of instances
            - available_instance_list.get(index)
            - how to ensure the thread safety?
              it use AtomicValue CAS + spin lock (why not use lock, answer: CAS + spin lock faster)
            
        - Spring Eureka client has dependency of Ribbon
  
  - Feign (stopped)
    encapsulate RestTemplate + Ribbon
    
  - Spring open feign
    encapsulate Feign: Annotation + Interface
      - open feign by default loadbalance is enabled
      - by default open feign timeout setting is 1s, how to change this? by configure Ribbon property(it uses Ribbon) 
      
  

Service Trace
  - Sleuth

Vistualize Service Trace
  - Zipkin(Twitter)

