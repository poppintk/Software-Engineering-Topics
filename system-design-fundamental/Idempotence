1) What is Idempotence?
one or more request to API and generate the same output. For example users click on payment, no matter how many times users clicked it will not cause double pay.
* Retry is key factor cause the Idemopotence

2) Use case:
  1) users click on payment button
  2) url return back the payment url
  3) Microservices RPC call with retry (retry will cause Idemotence)

3) SQL and Idempotence:
  SQL is idempotence in many operations, but not all operation are idempotence.
  Example idemotence operation:
    SELECT * FROM table WHERE id=? 
    UPDATE table SET col1=1 WHERE cols2=2
    DELETE FROM user WHERE useid=1 
    INSERT INTO USER(userid, name) VALUESï¼ˆ1,'a') only if userid is primary key
    
  Example NOT idemotence operation:
    UPDATE table SET col1=col1+1 WHERE col2=2 
    INSERT INTO user(userid, name) VALUES(1,'a') if user id is not primary key and allow duplicate then each time insert will create new record with different id
    

4) Idempotence solutions:
  1) token mechanism
    a) Server provide token API, and those token generated by server will be saved into Redis. When some bussiness logic requires idempotence, call to get the token.
    b) After getting the token then calling the target API with token (usually token in the request header)
    c) The server will check whether token is in Redis or not, if exist then it's first time
