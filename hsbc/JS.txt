PROMISES

Important: Always return results, otherwise callbacks won't catch the result of a previous promise 


executor function - (resolve,reject)=>{}
Handler - .then((result)=>{})

The code of a promise executor and promise handlers has an "invisible try..catch" around it. If an exception happens, it gets caught and treated as a rejection automatically.


.catch, will catch any action failed in the chain

Detail
https://javascript.info/promise-error-handling
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises


How to Cancel Fetch api call

https://stackoverflow.com/questions/31061838/how-do-i-cancel-an-http-fetch-request


Step 1: You create an AbortController (For now I just used this)
const controller = new AbortController()
Step 2: You get the AbortControllers signal like this:
const signal = controller.signal
Step 3: You pass the signal to fetch like so:
fetch(urlToFetch, {
    method: 'get',
    signal: signal, // <------ This is our AbortSignal
})
Step 4: Just abort whenever you need to:
controller.abort();


WebSocket
https://www.javainuse.com/misc/websockets-interview-questions


“==” Vs “===“
== compare value, if type is different requires type coercion
=== compare not only value but also the type.

In speed === is faster

Clojure
A function returning a function that captures the scopes

Woker
Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. 
https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers

https://www.guru99.com/javascript-interview-questions-answers.html
