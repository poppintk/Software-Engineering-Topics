
Some React questions from previous other role, Don’t have any one interviewed with this team, hope anything would help.
·         Mainly around javascript
·         Clojure: scopes, arrow functions - explain how they're relational and what they do
o    A function returning a function that captures the scopes
·         ES6/7/8/9/10
o    Adding features, away, difference between using different figments
·         HTML5
o    Workers/what kind/explain what a worker is
o    HTML interface
·         React
o    [hard question] How to fetch data from  the backend - user closes the page, how do you prevent wasting the request/promise while the backend is already fetching it? (amounting stage with Redux Saga or Rxjs, unsubscribing) - or make a local state to resolve it.
·         Javascript
o    Pretty basic questions
o    What's the difference between 2=(2 equal sign) and 3=(3 equal sign), which one is faster?
Hardest questions:
Querying, maps in JS, Websockets
 
Asked about react:  how are you going to… if you are doing a request inside a component; by the time the server is assessing the request the user closes the page what are you going to do to stop wasting the response from the backend?

What is the difference using try catch inside a basic function/inside a regular function
Asked  to “ create a promise” – what is going to happen if you return a promise? Make a new promise but make it a basic function – using try catch all together
 

------------------------------------------------------------------------------------
PROMISES

Important: Always return results, otherwise callbacks won't catch the result of a previous promise 


executor function - (resolve,reject)=>{}
Handler - .then((result)=>{})

The code of a promise executor and promise handlers has an "invisible try..catch" around it. If an exception happens, 
it gets caught and treated as a rejection automatically.


.catch, will catch any action failed in the chain

Detail
https://javascript.info/promise-error-handling
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises

---------------------------------------------------------------------------------
How to Cancel Fetch api call

https://stackoverflow.com/questions/31061838/how-do-i-cancel-an-http-fetch-request


Step 1: You create an AbortController (For now I just used this)
const controller = new AbortController()
Step 2: You get the AbortControllers signal like this:
const signal = controller.signal
Step 3: You pass the signal to fetch like so:
fetch(urlToFetch, {
    method: 'get',
    signal: signal, // <------ This is our AbortSignal
})
Step 4: Just abort whenever you need to:
controller.abort();

-------------------------------------------------------------------------------
WebSocket
https://www.javainuse.com/misc/websockets-interview-questions

WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.



-------------------------------------------------------------------------------

“==” Vs “===“
== compare value, if type is different requires type coercion
=== compare not only value but also the type.

In speed === is faster
--------------------------------------------------------------------------------
Clojure
A function returning a function that captures the scopes
--------------------------------------------------------------------------------
Woker
Web Workers are a simple means for web content to run scripts in background threads. 
The worker thread can perform tasks without interfering with the user interface. 
https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers

https://www.guru99.com/javascript-interview-questions-answers.html
