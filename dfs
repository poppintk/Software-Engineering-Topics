79 需要回溯 而第200题不需要进行回溯，这是为什么呢？
200题每个grid只能属于一个connected component，一旦第一次被访问到就算找到组织（解）了，不能再被其他联通分量使用。
对于79题，如果当前路径无解，最后一个字符其实被没有被使用到，所以退栈前需要还原，那么其他路径就可以使用了

对于DFS来说绝大对数的情况下是需要还原的，因为没找到解。这个类型题目的时间复杂度通常为为O(n!) O(2^n) 或者 O(c^n)。
只有找连通分量(connected component)/拓扑排序(topological sort)的时候不需要还原，时间复杂度为O(V+E)

要不要回溯的关键： 
不需要回溯： 一旦第一次被访问到就算找到组织（解）了，不能再被其他联通分量使用。
需要回溯：所以退栈前需要还原，那么其他路径就可以使用了


 why Sudoku sovlver need to return bool, while n-Queen can return void?
 For NQueen, we need to find all solutions and valid solution are stored in sols_, no need to return.
For Sudoku solver,  we only need to find one solution, whenever we found it (e.g. y == 9), fill() returns true 
and we no longer need to search/update board anymore and the current board is the solution.
=>
when use void dfs() and bool dfs()?
if search all solutions then void dfs()
if search only one solution then bool dfs()

Sudoku solver vs n-queen
backtracking的时机
n-queen 是一行一行搜的
diag1 key = (i + j);
diag2 key = (j - i + (n - 1));

sudoku 是每行从左边到右边
（row/3)*3 + col/3
-------------------------------------------------------------------------------------------------------------------------
207. Course Schedule
伪代码
Topological sorting:

build graph and initialize visted[unkown,visited, visiting]
 
for each node:
    if not marked:
        if(dfs(node) == CYCLE) return CYCLE
return OK

dfs(node):
    if node is marked as visited: return OK
    if node is marked as visiting: return CYCLE
    mark node as visiting
    for each new_node in node.neighbors:
        if dfs(new_node) == CYCLE: return CYCLE
    mark node as visited
    
    add node to the "head" of order_list
    
    return OK
Complexity: O(n)
拓扑排序 = 顶点染色 + 记录顺序

class Solution {
    private int UNKONW = 0;
    private int VISITING = 1;
    private int VISITED = 2;
    
    private boolean OK = true;
    private boolean CYCLE = false;
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // construct adjancy list
        Map<Integer, List<Integer>> adjancy = new HashMap<>();
        for(int[] p: prerequisites){
            if(!adjancy.containsKey(p[0])){
                adjancy.put(p[0],new ArrayList<>());
            }
            adjancy.get(p[0]).add(p[1]);
        }
    
        int[] visited = new int[numCourses]; 
        for(int i = 0; i < numCourses; i++){
            if(visited[i] == UNKONW) {
                if(!hasTopoSort(adjancy,visited, i)){
                    return CYCLE;
                }
            }
        }
        return OK;
        
    }
    public boolean hasTopoSort(Map<Integer, List<Integer>>  adjancy, int[] visited, int course){
        if(visited[course] == VISITED) return OK;
        if(visited[course] == VISITING) return CYCLE;
        
        if(adjancy.containsKey(course)){
            visited[course] = VISITING;
            for(int nextCourse: adjancy.get(course)){
                if(!hasTopoSort(adjancy,visited, nextCourse)) return CYCLE;
            }
            visited[course] = VISITED;
        }
        
        return OK;
    }
}


END 207. Course Schedule
-------------------------------------------------------------------------------------------------------------------------

79. Word Search
class Solution {
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int cols = board[0].length;
  
        for(int i = 0; i< rows; i++){
            for(int j = 0; j < cols;j++){
                if(backTracking(board,word,0,i,j)) return true;
            }
        }
        return false;
    }
    
    public boolean backTracking(char[][] board, String word,int index,int i,int j){
        int rows = board.length;
        int cols = board[0].length;
        // search range space
        // choice spaces
        if(i < 0 || i == rows || j < 0 || j == cols) return false;
        
        // constraints: not allowing
        if(board[i][j] != word.charAt(index)) return false;
        
        // goal
        if(index == word.length() - 1) return true;
    
        
        board[i][j]^= 256;
        boolean ans = backTracking(board,word,index+1,i+1,j) ||
            backTracking(board,word,index+1,i-1,j)||
            backTracking(board,word,index+1,i,j+1)||
            backTracking(board,word,index+1,i,j-1);
        board[i][j]^= 256;
        return ans;
  
    }
}

Time complexity:
search: O(4^l) where l = len(word)
total: O(m*n*4^l)

Space complexity:
O(m*n + l)
m*n 程序必须使用的空间


END 79. Word Search
-----------------------------------------------------------------------------------------------------------------------------
200. Number of Islands.(connected components pattern)
similar question 733. Flood Fill

class Solution {
    public int numIslands(char[][] grid) {
        
        int row = grid.length;
        if(row == 0) return 0;
        int col = grid[0].length;
        
        int count = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j ++){
                if(grid[i][j] == '1'){
                    count +=1;
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }
    
    public void dfs(char[][] grid, int i,int j){
        int row = grid.length;
        int col = grid[0].length;
        if(i == row || i < 0 || j < 0 || j == col || grid[i][j] == '0') return;
        grid[i][j] = '0';
        dfs(grid,i + 1,j);
        dfs(grid,i - 1,j);
        dfs(grid,i,j + 1);
        dfs(grid,i,j - 1);
        
    }
}

Time complexity:
total: O(m*n)
Space comlexity:
O(m*n)

END 200. Number of Islands
-----------------------------------------------------------------------------------------------------------------------------
547. Friend Circles (connected components pattern)
class Solution {
    public int findCircleNum(int[][] M) {
        int row = M.length;
        int count = 0;
        Set<Integer> visited = new HashSet<>();
        
        for(int i = 0; i < row; i++){
            if(visited.contains(i)) continue; // needed
            dfs(M,visited, i);
            count++;
        }
        
        return count;
    }
    
    public void dfs(int[][] M, Set<Integer> visited,int cur){
        if(visited.contains(cur)) return;
        visited.add(cur);
        // for all current's friend
        for(int i = 0; i < M.length; i++){
            if(M[cur][i] == 1 && !visited.contains(i)){
                dfs(M,visited, i);
            }
        }
        
    }
}

Time complexity:
total: O(N^2)
Space comlexity:
O(N)


END 547. Friend Circles
----------------------------------------------------------------------------------------------------------------------------
130. Surrounded Regions (connected components pattern)
class Solution {
    public void solve(char[][] board) {
        int row = board.length;
        if(row == 0) return;
        int col = board[0].length;
        
        // mark first col and last col if exist 'O' into 'G'
        for(int r = 0; r < row; r++){
            dsf(board,r,0);
            dsf(board,r,col-1);
        }
        // mark first row and last row if exist 'O' into 'G'
        for(int c = 0; c < col; c ++){
            dsf(board,0,c);
            dsf(board,row-1,c);
        }
        
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == 'G') board[i][j] = 'O';
                else if(board[i][j] == 'O') board[i][j] = 'X';
                
            }
        }
    }
    
    public void dsf(char[][] board,int i, int j){
        int row = board.length;
        int col = board[0].length;
        if(i < 0 || i >= row || j <0 || j >= col || board[i][j] != 'O') return;
        //NOTE:  board[i][j] == 'X' will cause overflow
        
        board[i][j] = 'G';
        dsf(board,i-1,j);
        dsf(board,i+1,j);
        dsf(board,i,j+1);
        dsf(board,i,j-1);   
    }

}

Time complexity:
total: O(MN)
Space comlexity:O(MN)


END 130. Surrounded Regions
-----------------------------------------------------------------------------------------------------------------------------
52. N-Queens II
class Solution {
    
    Integer count = 0;
    Set<Integer> col = new HashSet<>();
    Set<Integer> diag1 = new HashSet<>();
    Set<Integer> diag2 = new HashSet<>();
    
    public int totalNQueens(int n) {
        char[][] board = generateBoard(n);
        solveQueen(board, n, 0);
        return count;
    }
    
    public char[][] generateBoard(int n){
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        return board;
    }
    
    public void placeQueen(char[][] board, int n, int i, int j){
        col.add(j);
        diag1.add(i + j);
        diag2.add(j - i + (n - 1));
        board[i][j] = 'Q';
    }
    
    public void removeQueen(char[][] board, int n, int i, int j){
        col.remove(j);
        diag1.remove(i+j);
        diag2.remove(j - i + (n - 1));
        board[i][j] = '.';
    }
    
    public boolean isInvalid(char[][] board, int n, int i, int j){
        return col.contains(j) || diag1.contains(i+j) || diag2.contains(j - i + (n - 1));
    }
    
    public void solveQueen(char[][] board, int n, int i){
        if(i == n){
            count ++;
            return;
        }// goal
        
        // for every column
        for(int j = 0; j < n; j++){
            if(isInvalid(board,n,i,j)) continue; // constraint
            placeQueen(board,n,i,j);
            solveQueen(board, n, i+1);
            removeQueen(board,n,i,j);
        }
    }
}

Time complexity:
total: exponential time
Space comlexity:O(n*n + 3n)

END 52. N-Queens II
---------------------------------------------------------------------------------------------------------------------------
37. Sudoku Solver

class Solution {
    Set<Character>[] rows = new Set[9];
    Set<Character>[] cols = new Set[9];
    Set<Character>[] boxes = new Set[9];
    
    public void solveSudoku(char[][] board) {
        // initialize
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length;j++){
                if(rows[i] == null) rows[i] = new HashSet();
                if(cols[j] == null) cols[j] = new HashSet();
                if(boxes[(i/3)*3 + j/3] == null) boxes[(i/3)*3 + j/3] = new HashSet();
                
                if(board[i][j] != '.'){
                    rows[i].add(board[i][j]);
                    cols[j].add(board[i][j]);
                    boxes[(i/3)*3 + j/3].add(board[i][j]);
                }
            }
        }
        
        solve(board,0,0);
    }
    
    public boolean solve(char[][] board, int row, int col){
        if(row == board.length) return true;
        
        int nextCol = (col + 1) % board.length; // code style trick
        int nextRow = col + 1 == board.length ? row + 1 : row; // code style trick
        
        if(board[row][col] != '.') return solve(board,nextRow,nextCol);
        
        for(char c = '1'; c <= '9'; c++){
            if(isValid(board,row,col,c)){
                rows[row].add(c);
                cols[col].add(c);
                boxes[(row/3)*3 + col/3].add(c);
                board[row][col] = c;
                if(solve(board,nextRow,nextCol)) return true;
                rows[row].remove(c);
                cols[col].remove(c);
                boxes[(row/3)*3 + col/3].remove(c);
                board[row][col] = '.';
            }
        
        }
        // after try all 1 to 9, if there is not a solution then return false
        return false;
        
        // // for each column
        // for(int i = row; i < board.length; i++,col = 0){
        //     for(int j = col; j <  board.length; j++){
        //         if(board[i][j] != '.') continue;
        //         for(char c = '1'; c <= '9'; c++){
        //             if(!isValid(board,i,j,c)) continue;
        //             board[i][j] = c;
        //             if(solve(board,i,j+1)){
        //                 return true;
        //             }
        //             board[i][j] = '.';
        //         }
        //         return false;
        //     }
        // }
        // return true;
    }
    
     private boolean isValid(char[][] board, int row, int col, char c){
         return !rows[row].contains(c) 
             && !cols[col].contains(c) 
             && !boxes[(row/3)*3 + col/3].contains(c);
    }
}

END 37. Sudoku Solver
--------------------------------------------------------------------------------------------------------------------------

Combination vs Permutation

377. Combination Sum IV is a permutation, need to use DP

permutation 需要 boolean来标记是因为不可以用重复元素, 比如不可以有(1,1,1),
所以用了1之后1就被标记为true. Combination不需要记录是因为for循环不是从0开始的 是从s+1开始的, 所以不会跟之前的s个元素产生重复

permutation - order matter (1,2,3) (1,3,2)属于不一样的case
combination - order does not matter (1,2,3) (1,3,2)属于一个case

perm(nums, depth, n, used, curr, ans):
    if depth==n:
        ans.append(curr) //cur是指针引用， append的时候需要deep copy
        return
    
    for i = 0 to len(nums):
        //boolean来标记是因为不可以用重复元素, 比如不可以有(1,1,1),
        if used[i]: continue //permutation也可以用set 
        used[i] = True
        curr.push(nums[i])
        perm(nums, d+1, n, curr, ans)
        curr.pop()
        used[i] = False
        
        
combination(nums, depth, n, start, curr, ans):
    if depth == n://特定了长度 比如3choose 2
        ans.append(curr)
        return
        
    for i = start to len(nums):
        curr.push(nums[i])
        combination(nums, depth + 1, n, i+1, curr, ans) //注意i+1 下一个start 从i+1开始 避免重复被用
        curr.pop()
       
--------------------------------------------------------------------------------------------------------------------------
39. Combination Sum (without duplicates, can use element as many as we like )
class Solution { 
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        Arrays.sort(candidates); // 这道题需要sorted
        backTracking(candidates, target, 0, curr, result);
        return result;
    }
    
    public void backTracking(int[] candidates, int target, int from, List<Integer> curr, List<List<Integer>> result){
        if(target == 0){
            result.add(new ArrayList<>(curr));
            return;
        }
        for(int i = from; i < candidates.length; i++){
            if(candidates[i] > target) break; // 需要
            curr.add(candidates[i]);
            
            // according to template next from which is i index needs to be i+1, but this queustion
            // require a number can be applied couple times(duplicated allowed)
            backTracking(candidates,target - candidates[i],i,curr,result); 
            curr.remove(curr.size()-1);
        }
    }
}

// 如果我们想要 结果按照顺序输出

class Solution { 
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        Arrays.sort(candidates);
        for(int i = 1; i <= target/candidates[0]; i++){
            backTracking(candidates, 0, i ,target, 0, curr, result);    
        }
        return result;
    }
    
    public void backTracking(int[] candidates, int depth, int n, int target, int from, List<Integer> curr, List<List<Integer>> result){
        if(depth == n){
            if(target == 0){
                result.add(new ArrayList<>(curr));
            }
            return;
        }
        
        for(int i = from; i < candidates.length; i++){
            if(candidates[i] > target) break;
            curr.add(candidates[i]);
            backTracking(candidates,depth+1 ,n,target - candidates[i],i,curr,result);
            curr.remove(curr.size()-1);
        }
    }
}


Time Complexity: O(2^n) 
let s = target / min(nums[i])  T = C(s,1) + C(s, 2) + ... + C(s, s) = 2^s
space: O(n)
 O(target / min(nums[i]) )
END 39. Combination Sum
--------------------------------------------------------------------------------------------------------------------------
  40. Combination Sum II (Value used only once， array has duplicated value)
  
  class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        
        Arrays.sort(candidates);    

        dfs(candidates, target, 0, cur, ans);
        
        return ans;
    }
    
    public void dfs(int[] candidates, int target, int from, List<Integer> cur,  List<List<Integer>> ans){
        if(target == 0){
            ans.add(new ArrayList<>(cur));
            return;
        }

        for(int i = from; i < candidates.length; i++){
            if(candidates[i] > target) return;
            if(i > from && candidates[i] == candidates[i-1]) continue;
            cur.add(candidates[i]);
            dfs(candidates, target - candidates[i], i+1, cur, ans);
            cur.remove(cur.size()-1);
        }
    }
}
  
  END 40. Combination Sum II
  -------------------------------------------------------------------------------------------------------------------------
 216. Combination Sum III
 class Solution {
     List<List<Integer>> ans = new ArrayList<>();
     public List<List<Integer>> combinationSum3(int k, int n) {
       int[] nums = new int[9];
       for(int i = 1; i <= 9 ; i++){
         nums[i-1] = i;
       }
       dfs(nums, 0, n, k, 0, new ArrayList<>());
       return ans;
     }
     public void dfs(int[] nums, int from, int target, int k, int depth ,List<Integer> curr){
       if(depth == k){
         if(target == 0){
           ans.add(new ArrayList<>(curr));
           return;
         }
       }
       for(int i = from; i < nums.length; i++){
         if(nums[i] > target) return;
         curr.add(nums[i]);
         dfs(nums, i + 1, target - nums[i], k, depth + 1 ,curr);
         curr.remove(curr.size() - 1);
       }
     }
 }

 
 END 216. Combination Sum III
 
  -------------------------------------------------------------------------------------------------------------------------
