Step 1 - Understand the problem and establish design scope
  Candidate: What are the characteristics of unique IDs? Interviewer: IDs must be unique and sortable.
  Candidate: For each new record, does ID increment by 1?
  Interviewer: The ID increments by time but not necessarily only increments by 1. IDs created in the evening are larger than those created in the morning on the same day.
  Candidate: Do IDs only contain numerical values? Interviewer: Yes, that is correct.
  Candidate: What is the ID length requirement? Interviewer: IDs should fit into 64-bit.
  Candidate: What is the scale of the system?
  Interviewer: The system should be able to generate 10,000 IDs per second.
  
  requirements are listed as follows:
  • IDs must be unique.
  • IDs are numerical values only.
  • IDs fit into 64-bit.
  • IDs are ordered by date.
  • Ability to generate over 10,000 unique IDs per second.
  
Step 2 - Propose high-level design and get buy-in
  Multiple options can be used to generate unique IDs in distributed systems. The options we considered are:
  • Multi-master replication
    - uses the databases’ auto_increment feature.Instead of increasing the next ID by 1, we increase it by k, where k is the number of database servers in use
    - some major drawbacks:
      • Hard to scale with multiple data centers
      • IDs do not go up with time across multiple servers. (cannot sort by time)
      • It does not scale well when a server is added or removed.
  • Universally unique identifier (UUID)
    UUID is a 128-bit number used to identify information in computer systems.
      Pros:
      • Generating UUID is simple. No coordination between servers is needed so there will not be any synchronization issues.
      • The system is easy to scale because each web server is responsible for generating IDs they consume. ID generator can easily scale with web servers.
      Cons:
      • IDs are 128 bits long, but our requirement is 64 bits. 
      • IDs do not go up with time. (cannot sort by time)
      • IDs could be non-numeric.
      
  • Ticket server
    The idea is to use a centralized auto_increment feature in a single database server (Ticket Server)
    Pros:
    • Numeric IDs.
    • It is easy to implement, and it works for small to medium-scale applications.
    Cons:
    • Single point of failure. Single ticket server means if the ticket server goes down, all systems that depend on it will face issues. To avoid a single point of failure, we can set up multiple ticket servers. However, this will introduce new challenges such as data synchronization.
  • Twitter snowflake approach
    
     1 bit |   41 bits  |   5 bits       | 5 bits     |  12 bits        | 
    |-------------------------------------------------------------------|
    | 0    |  timestamp | data center ID | machine ID | sequence number |
    |-------------------------------------------------------------------|
    
    • Sign bit: 1 bit. It will always be 0. This is reserved for future uses. It can potentially be used to distinguish between signed and unsigned numbers.
    • Timestamp: 41 bits. Milliseconds since the epoch or custom epoch. We use Twitter snowflake default epoch 1288834974657, equivalent to Nov 04, 2010, 01:42:54 UTC.
    • Datacenter ID: 5 bits, which gives us 2 ^ 5 = 32 datacenters.
    • Machine ID: 5 bits, which gives us 2 ^ 5 = 32 machines per datacenter.
    • Sequence number: 12 bits. For every ID generated on that machine/process, the sequence number is incremented by 1. The number is reset to 0 every millisecond.
    
Step 3 - Design deep dive
  - Datacenter IDs and machine IDs are chosen at the startup time, generally fixed once the system is up running. Any changes in datacenter IDs and machine IDs require careful review since an accidental change in those values can lead to ID conflicts. Timestamp and sequence numbers are generated when the ID generator is running.
  - Timestamp
    - The most important 41 bits make up the timestamp section. As timestamps grow with time, IDs are sortable by time.
    - The maximum timestamp that can be represented in 41 bits is 2 ^ 41 - 1 = 2199023255551 milliseconds (ms), which gives us: ~ 69 years. After 69 years, we will need a new epoch time or adopt other techniques to migrate IDs.
  - Sequence number
    - Sequence number is 12 bits, which give us 2 ^ 12 = 4096 combinations. This field is 0 unless more than one ID is generated in a millisecond on the same server. In theory, a machine can support a maximum of 4096 new IDs per millisecond.

Step 4 - Wrap up
We discussed different approaches to design a unique ID generator: multi- master replication, UUID, ticket server, and Twitter snowflake-like unique ID generator. 
We settle on snowflake as it supports all our use cases and is scalable in a distributed environment.


If there is extra time at the end of the interview, here are a few additional talking points:
• Clock synchronization. In our design, we assume ID generation servers have the same clock. This assumption might not be true when a server is running on multiple cores. The same challenge exists in multi-machine scenarios. Solutions to clock synchronization are out of the scope of this book; however, it is important to understand the problem exists. Network Time Protocol is the most popular solution to this problem. For interested readers, refer to the reference material [4].
• Section length tuning. For example, fewer sequence numbers but more timestamp bits are effective for low concurrency and long-term applications.
• High availability. Since an ID generator is a mission-critical system, it must be highly available.
