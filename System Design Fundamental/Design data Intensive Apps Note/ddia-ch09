Consensus: All nodes agree on something happened

Consistency is not free, usually the stronger consistent the worse in performance

single master, Multiple masters and Leaderless all have data inconsistent issue



Linearizability/Atomic consistency/Strong Consistent/immediate consistency/external consistency: 
  A guarrantee that the value reading is the most recency, all replica behavave the same and look like a one replica
  - any continuesly read should also return the new value base on new value reading from last read 
  - base on time sequence
  - no concurrentcy
  

Linearizability Use Case
  Single Master- Leader election and Locking
    one approach to choose leader is by using lock. No matter how this locking is implemented, it must be lieanrizability: all nodes must agree on which node has the lock at the moment
  
  Unique Constraint 
    DB has unique constraint, for example userID and email address must be uniquely indicate a user. However, in file storage service two users can create same files or user, one of them must 
    failed. one easy way is by using lock, locking the username when one user is registering
  
  Different work flow processing on different rate of speed issue
  
    User --- 1.upload image ---> Web Server --- 2. store full-size image---> File Storage
                                  |                                            | 5. fetch full-size image from File storage
                               3. send message                                 | 6. store resized image to File storage
                                  |                                            |
                               Message Queue --- 4. deliver message --->  Image Resizer

    NOTE: message queue processing faster than File storage internal replica speed, it could end up that when 5) is processed but 2) still not yet done. as a result 5) fetch image is coming from old image or nothing.
    Solution: Linearizability but performance not free OR much lightweight solution, Read your own write, reading from master 
  
How to Implement linearizability System
  
  Linearizability is for single object(single partition), mutiple partitions(divide DB object into multile objects) is different problem (distributed transaction and concenses)
  
  
CAP
  C - Linearizability consistency
  A - Availability
  P - network partition (one of fault)
  Note: CAP thoery concept not so helpful from system design perspective, it is only consider one consistency model and one fault
  
Consistent with Causally - A gurrantee that reason is happening from result, it is weaker consistency model than linearizability.
Linearizability is bad on performance but we still can have Consistent with Causally and better performance. How? use version nubmer(sequence number OR timestamp) to ensure ordering


Lamport Timestamp


Total Order Broadcast/Atomic Broadcast
  - reliable delivery
  - totally ordered delivery
  
  
Distributed Transaction and Concenses 
  Consenses use case
    - Leader election
    - Atomic commit 
      let all nodes agree on transaction result: either rollback/commit


Two-Phase commit
  A algorithm that used for atomic transaction commit across multiple nodes
  
  Coordinator  |  write data       write data    |  Prepare           | Commit            |
  Database1    |    \_/ ok           \   / ok    |   \_/ ok  \   / ok |  \_/ ok \   / ok  |
  Database2    |                      \_/        |            \_/     |          \_/      |
               |---------------------------------|------Phase1--------|--------Phase2-----|
  
  Any exception occurs on phase1 and 2 will cause rollback to all nodes
  
  
