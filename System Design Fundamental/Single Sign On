User --(login in)--> Auth Server --(ticket)--> User --(ticket)--> Protected Resource ---(verify ticket)---> AuthServer

             
            | ----> Protected Resource 1 -------->
User -------------> Protected Resource 2 -------->  AuthServer
            | ----> Protected Resource 3 -------->


How to prevent url being DDOS attack on user register? 
  - one solution is using phone verification mechanism and store verification code in the Redis
  - Rate limiter on IP address
Traditional way 
    username password register 
        send username, password -> memberService: store password (with salt) and username into database -> redirect to login page
        
    username password login (session base)
        send username, password -> memberService.find(username, password) find username and password matching in the database 
        -> store user information in cookie and return to F/E user , also store user session in Redis with expiryTime-> redirect to callback page 
        
    username password login (token base)
         send username, password -> memberService.find(username, password) find username and password matching in the database 
        -> create a JWT token and store in cookie and return to F/E user -> redirect to callback page 
        
    NOTE: before access to each protected resource, need to verify cookie information is passing from request with Redis session/token verify
    
    Comparision
        Session based authentication: 
            Because the sessions are stored in the serverâ€™s memory, scaling becomes an issue when there is a huge number of users using the system at once.
        Token based authentication: 
            There is no issue with scaling because token is stored on the client side. Token is solution trade Running time instead of space
    
    
    

Oauth2 flow for web server:
   1) client browser click on the Oauth2 login icon, Request to third party for the login with redirect URL(for web server)
   2) Users input their third party login
   3) After authenticate third party authorization server redirect back to the URL(web server) with access token(code)
   4) The web server now can call POST request ask for public protected user information. Note the POST body requires access token(code) just return
   CLIENT_ID, CLIENT_KEY those can be access from the third party
   5) public protected information is returned
   
Oauth social (token base)
    social user register & login (Note: Oauth doesn't require register)
    implement the success callback for specific social auth in the controller i.e.(@GetMapping("/oauth2.0/google/success"))
    The body of controller will call specific social auth i.e.(HttpResponse response = HttpUtils.doPost("https://oauth2.googleapis.com", "/token", "POST", null, null, map);)
    Get the social user info from the social auth payload -> member service: 
    1) if already have the user info in the database then update expiryTime and accessToken and return expiryTime and accessToken  
    2) if first time user, then store social user information into database including accessToken andexpiryTime
      
 SMS API protection:
      Why? public API need be called too often
      - one workable solution is use Redis to save key-value pair key is the phone number and the value is SMS code + current system time
      - Rate limiter can also work
      


