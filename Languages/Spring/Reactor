Reative Stream are immutable

Use buffer(10).flatMap(batch -> serviceCall(batch))
// it will process 10 each time and keep connection open 

Debug setting for error trace
  Hooks.onOperatorDebug()
    - on DEV use Hooks.onOperatorDebug() in Main method
    - avoid to use it on PRD as it may slow down the performance of the app
    
  checkpoint()
    - on your functional calling chain call the checkpoint("point")
    - drawback of this approach is we need to call this function everywhere!
    
  ReactorDebugAgent
    - This is recommended option for debugging exceptions in project Reactor
    - Java Agent that runs alongside your app
    - It collects the stack trace information of each operator without any performance overhead(PRD)
    - Use it in SpringBoot
      - requires to import the dependency of reactor-tools
      - call ReactorDebugAgent.init(); in your main function
      - in the test case method should also call ReactorDebugAgent.processExistingClasses();



Flux.delayElements(Duration.ofMillis(unit)); // delay for unit time 


Map()
  - For basic transformation Non-IO operations
  - One to one transformation
  - Does the simple transformation form T to V
  - Sync transformation
  - Does not support transformations that returns Publisher

flatMap()
  - For IO operations
  - One to N transformations
    i.e. "ALEX" -> ["A", "L", "E", "X"]
  - Does more than just transformation. Subscribes to Flux or Mono that's part of the transformation and then flattens it and sends it downstream
  - Async transformation (due to async when no gurrantee the ordering)
  - Use it with transformations that returns Publisher
  
concatMap()
  - similar to flatMap(), the only difference is concatMap will preserve the ordering even it's async operations. it will wait for the all async operations to preserve the ordering
  - use concatMap() if ordering matter
  

flatMap in Mono
  - use it when the transformation return a Mono(i.e. Mono<List<String>>)
    String s -> Mono<List<String>>
  
  - Returns a Mono<T>
  
  - Use flatMap if the transformation involves making a REST API call or any kind of functionality that can be done asynchronously
 
  
flatMapMany() in Mono
  - similar to flatMap in Mono, only difference is return Flux<T>
  
  
transform()
  - Used to transform from one type to another (increase Reuseability)
  - Accepts Function Functional Interface
    - Function Functional Interface got released as part of Java 8
    - Input- Publisher(Flux or Mono)
    - Output - Publisher(Flux or Mono)

defaultIfEmpty()
  - there exist empty element in Flux or Mono
  - in such case we use defaultIfEmpty("default")

switchIfEmpty() 
  - similar to defaultIfEmpty() except it pass a lambda function, map a Flux to Flux or Mono to Mono
  
  
  
Combining Flux & Mono

contact() & concatWith()
  - combine two reactive streams into one Flux
  - concatenation of Reactive Streams happends in a sequence
    - First one is subscribed first and completes
    - Second one is subscribed after that and then completes
  - concat() - static method in Flux
  - concatWith() - instance method in Flux and Mono
  
  
merge() & mergeWith()
  - Both the publisher are subscribed at the same time
    - Publishers are subscribed eagerly and the merge happen in an interleaved fashion 
      Flux 1 -> A, B, C
      Flux 2 -> E, F, G
        -> A,E,B,F,C,G
    - concat() subscribes to Publishers in a sequence
  - merge() - static method in Flux
  - mergeWith() - instance method in Flux and Mono
  
  
  mergeSequential()
    - combine two Publishers (Flux) into one
    - Static method in Flux
    - Both the publishers are subscribed at the same time
      - Publishers are subscribed eagerly
      - Even though the puglishers are subscribed eagerly the merge happens in a sequence
      
  zip() & zipWith()
   Note: when using zip in a case that 10 api calls and one call fail, it will not clean up heap memory immediately
   as solution always using zipDealyError() will wait for all calls and clean up heap memory
  
   - zip two publishers together
    i.e.
      abcFlux = FLux.just("A", "B", "C");
      defFlux = Flux.jsut("D", "E", "F");
      return Flux.zip(abcFlux, defFlux, (first, second) -> first + second); // "AD", "BE", "CF"
   - Waits for all the Publishers involved in the transformation to emit one element
    - Continues until one publisher sends an OnComplete event
    
  - zip() 
    - static method in Flux
    - can merge up to 2 to 8 Publishers into one
  - zipWith() 
    - instance method in Flux and Mono
    - merge two Publisher into one


doOn*CallBacks
    - those operators allow you to peek into the events that are emitted by the Publisher(Flux or Mono)
    - Those are also called non - side effect operators
        - they don't change the original sequence at all
    - some of operators:
        - doOnSubscribe(): Invoked for every new subscription from the subscriber
        - doOnNext(): Invoked for every element that's emitted from the publisher
        - doOnComplete(): Invoked when the Completion signal is sent from the publisher
        - doOnError(): Invoked when an exception signal is sent from the publisher
        - doFinally(): Invoked in a successful or error scenario

    - when to use doOn*CallBack operators?
        - used for debugging an issue in your local environment
        - send a notificaiton when the reactive sequence completes or errors out
    
Exception Handling in Project Reactor
  1) Recover from an Exception
    - onErrorReturn()
      - provode single default value as fallback
    - onErrorResume()
      - Lambda Function interface, take a exception as input and output Publisher 
    - onErrorContinue()
      - Lambda BiConsumer interface, takes exception and value that triggerd the error
  2) Take an Action and throw the Exception
    - onErrorMap()
      - Catches the exception
      - Transforms the exception from one type to another
      - Does not recover from the exception
      - throw new Exception() in the body, not return
      
    - doOnError()
      - Catches the exception
      - Take an action when an Exception occurs in the pipeline
      - Does not modify the Reactive Stream
      - Error still gets propagated to the caller

Retry, retryWhen() and repeat()
  1) retry()
    - Use this operator to retry failed exceptions
    - When to use it?
       - Code interacts with external systems through network
         e.g. Resful API calls and DB calls
    - retry() : Retry the failed exception indefinitely
    - retry(n) : retry the failed exception "n" number of times where n is long value
  2) retryWhen
    - retryWhen() is more advanced compared to retry(), support exponential backoff
    - Conditionally perform retry on specific exceptions
    
  3) repeat()
    - Used to repreat an existing sequence
    - This operator gets invoked after the onCompletion() event from the existing sequence
    - Use it when you have an use-case to subscribe to same publisher again
    - This operator works as long as No Exception is thrown
    - repeat() : Subscribes to the publisher indefinitely
    - repeat(n) : Subscribes to the publisher "N" times
    
Reactor Execution Model
Note: in Reactor any code with delay operations(from Reactor) and that code will be handled by different threads.
  delay Operfactions(from Reactor) will swtiched to parallel thread which controlled by Scheduler.
  
  - Reactor Execution model is determined by Scheduler
  - Scheduler is an interface which is part of the Project Reactor
  - Similar to ExecutorService in Java which takes care of scheduling and executing tasks
  - By default the data flows in the thread where the subscribe() was invoked
  
  Scheduler Options
    - Schedulers is a factory class that can be used to switch the threads in the reactive pipeline execution
    - Schedulers.parallel()
      - it has a fixed pool of workers. No of threads = No of CPU cores in your machine
      - The time based operators use this by default(delayElements(), interval())
    - Schedulers.boundElastic()
      - it has a bounded elastic thread pool of worker
      - The no of threads can grow based on the need. It can increase up to 10X no of CPU cores
      - This is ideal for making Blocking IO calls
    - Schedulers.single()
      - A single resuable thread for executing the tasks
      
  pulblishOn(Scheduler s)
    - This operator is used to hop the Thread of execution of reactive pipleline from one to another
    - When to use publishOn(Scheduler s)?
      - Never block the thread in reactive programming
      - Blocking operation in the reactive pipeline can be performed after publishOn operator
      - The thread of execution is determined by the Scheduler that passed to it
    - Operators after publishOn() call will use the same thread comming from the Scheduler(like ExecutorService)
    - publishOn() influences the Thread downstream(operation after publishOn())
  
  subscribeOn(Scheduler s)
    - This operator is used to hop the Thread of execution of the reactive pipeline from one to another
    - subscibeOn() is used to influence the thread upstream&downstream(operation before also after)
      - It influences the operators above the subscribeOn() to switch the thread
    - subscribeOn() impacts the whole reactive pipeline 
    - When to use it?
      - when blocking code is part of the libarary where publishOn() is not added to it
        - Use subscribeOn() to influence the upstream to switch the tread
    

Push Model: servers that initiate(who did it on first) inforamtion updates to clients
Pull Model: clients that initiate requests to servers        
Issue on Push Model
  1) Publisher overwhelmed with more data than the subscriber can handle
  2) data might be pushed at a faster rate than the subscriber can handle
   
