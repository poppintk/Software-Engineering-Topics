Architecture:  master slave (Single master or Multiple master)

K8S requires Node number to be odd number >= 3

Feature:
-self healing
-secret management
-service discovery and load balancing
-horizontal scaling 

Use case:
 1) Microservices
 2) Lift and shift
 3) Cloud Native Network Functions
 4) Machine learning
 5) CI/CD

Components:
  Master:
    1) kubectl command line inteface 
    2) Web UI
    
    3) etcd
      - key value based database for K8S as all data cluster backend database
      - K8S cluster etcd database usually need a backup plan 
      - v2 is in memory database and v3 is local database
      - K8S cluster using Etcd v3 and v2 has been deprecated in K8S v1.11
    
    4) Kube-scheduler
      - monitoring those newly created Pods and manage to schedule nodes to run Pods
      - it must use master to schedule all K8S cluster operations
    
    5) Kube-controller-manager
        a) Node Contorller: response and alert issues on the nodes
        b) Replication Controller: maintain expected number of replications
        c) Endpoints Controller: used for adding endpoints(server or Pod)
        d) Service Account & Token Controllers: create default account and API token for the new naming space
    
    6) Kube-api server:
     Note: all components mentioned above(as well as KubeProxy, Kubelet) interacts with Kube-api. this might be the performance bottleneck (existing solution in K8S)
      - the entrance for external system to interact with K8S
      - provide authentication, authorization, access control and API register and discovery
        
  Node: running on a machine
    NOTE: Pods are group of containers
    
    1) Container (by default it's docker but can also use other container technology)
    2) Kubelet
      - the agent manager for Node
      - interact with container engine directly and manage container liefcycle
    3) Kube-proxy
      - provide internal service discovery and load balancer for service
      - write rules into IPTABLES, IPVS to implement service mapping for the access
      
    4) Fluentd
      - monitor for collecting logs from cluster
      
    5) plugins
       - CoreDNS: create a domain IP mapping for SVC in clusters
       - DashBoard: prove K8S a web interface
       - Ingress Controller: K8S officially only provides 4th layer proxy and Ingress could provide up to 7th layer proxy
       - Fedetation: A management controller for all K8S clusters
       - Prometheus: monior of K8S cluster
    
    
Pod
  - Pod are group of containers
  - within a same Pod two conainers are able to comunicate via PAUSE(shared network stack) 
  - Pod and Pod communication on different Node is via Overlay Network(Flannel + etcd)
  - Pod and Pod communication on same Node via networkbridge, no need Flannel
  - Pod and service communication is via IPtables(newer version use LVS)
  - External access to Pod requires Service NodePort(NodePort cannot be duplicated)


ReplicationController & ReplicaSet & Deployment
  - ReplicationController:  maintain expected number of replications
  - ReplicaSet: same as ReplicationController in new version K8S. better sytax support. 
    - it use label to controll the Pod
  - it is recommended that use ReplicaSet alone with Deployment. because ReplicaSet does not support rolling-update but deployment supports it

Deployment: alone with RC(replicaSet) to maintain expected number of replications on Pods(Could be cluster of Pods)
HPA(Horizontal Pod Autoscaling): apply on top of deployment to scale up/down (HPA + resource management i.e. CPU usage)
StatefulSet: docker for stateless application. StatefulSet is for stateful appllication like database
DaemonSet:ensure all node (or some) running a replication of Pod
Job and CronJob
  - Job one time running task, i.e. batch task
  - Cron Job: task running on specific time 

Service: How we discover IP address of the individual pod(Could be cluster of pods)
  - Load balancer on top of group of Pods(deployment)
  - if need to expose it to external access, Service type need to NodePort





Ingress controller: load balacing<nginx implemention>

each Pod has its own IP(can use duplicated port consumed by other Pods)
each Service has its own domain(can use duplicated port consumed by other Services)


NodePort - port exposed on the host machine(external app can access)
targetPort - This is the actual port on which your application is running inside the container.
port - port for service and redirect to targetPort

------------------------
Cluster resource category
  nameSpace: default
  
  cluster level:role
  
  metadata: HPA
  
  
YAML Properties
Required field to define a pod
-------------------------------------------------------------------------------------
|  PARAMETER                      |  TYPE     | DESC
|  version                        |  String   | K8S API version
|  kind                           |  String   | resource type in k8s, i.e. Pod
|  metadata                       |  Object   | metadata object
|  metadata.name                  |  String   | metadata name i.e. Pod's name
|  metadata.namespace             |  String   | metadata namespace
|  Spec                           |  Object   | detail of defined object
|  spec.containers[]              |  List     | list of container for spec object
|  spec.containers[].name         |  String   | define the name of container
|  spec.containers[].image        |  String   | define used image name
--------------------------------------------------------------------------------------
Optional
|spec.containers[].imagePullPolicy|  String   | image pull strategy 1) always: pull from online repo 2) never: pull from local repo 3)ifNotPresent: if local pull local if not pull online 
|spec.containers[].command[]      |  List     | define command to run while starting docker      
|spec.containers[].args[]         |  List     | define command argument for command to run while starting docker
|spec.containers[].workingDir     |  String   | define working directory of docker
-------------------------------------------------------------------------------------

kubectl explain Pod
kubectl describe <Pod Name> : see information in the Pod
kubectl log <Pod Name> -c <Container name> : see log in the particular container within a Pod
-----------------------------------------------------------------------
|                        Pod Lifecycle                                |
| ____________________________________________________________________| 
|  Init Container  |         |<---  Liveness(running state)        -->|
|  <-------------> |         |<---Readiness(init state)-->|  |<-Stop->|
| PAUSE network    |<---             Main Container               --->|
|                  |<-Start->|                                        |
-----------------------------------------------------------------------
Pod status:
  - Pending: one or more of container image not yet created
  - Running: Pod has been binded to a node and all containers in that Pod has bee created. But at least a container is running or on restart status
  - Succeeded: all containers in a Pod has been terminated successfully and not longer requires restart
  - Failed: container is terminated or exit with non-zero status(fail signal)
  - Unknown: can not detect status of Pod and usually it lose network connection
  


