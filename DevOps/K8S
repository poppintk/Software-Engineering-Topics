Architecture:  master slave (Single master or Multiple master)

K8S requires Node number to be odd number >= 3

Feature:
-self healing
-secret management
-service discovery and load balancing
-horizontal scaling 

Use case:
 1) Microservices
 2) Lift and shift
 3) Cloud Native Network Functions
 4) Machine learning
 5) CI/CD

Components:
  Master:
    1) kubectl command line inteface 
    2) Web UI
    
    3) etcd
      - key value based database for K8S as all data cluster backend database
      - K8S cluster etcd database usually need a backup plan 
    
    4) Kube-scheduler
      - monitoring those newly created Pods and manage to schedule nodes to run Pods
      - it must use master to schedule all K8S cluster operations
    
    5) Kube-controller-manager
        a) Node Contorller: response and alert issues on the nodes
        b) Replication Controller: maintain expected number of replications
        c) Endpoints Controller: used for adding endpoints(server or Pod)
        d) Service Account & Token Controllers: create default account and API token for the new naming space
    
    6) Kube-api server:
     Note: all components mentioned above(as well as KubeProxy, Kubelet) interacts with Kube-api. this might be the performance bottleneck (existing solution in K8S)
      - the entrance for external system to interact with K8S
      - provide authentication, authorization, access control and API register and discovery
        
  Node: running on a machine
    NOTE: Pods are group of containers
    
    1) Container (by default it's docker but can also use other container technology)
    2) Kubelet
      - the agent manager for Node
      - interact with container engine directly and manage container liefcycle
    3) Kube-proxy
      - provide internal service discovery and load balancer for service
      - write rules into IPTABLES, IPVS to implement service mapping for the access
      
    4) Fluentd
      - monitor for collecting logs from cluster
      
    5) plugins
       - CoreDNS: create a domain IP mapping for SVC in clusters
       - DashBoard: prove K8S a web interface
       - Ingress Controller: K8S officially only provides 4th layer proxy and Ingress could provide up to 7th layer proxy
       - Fedetation: A management controller for all K8S clusters
       - Prometheus: monior of K8S cluster
    
    
Pod
  - Pod are group of containers
  - within a same Pod two conainers are able to comunicate via PAUSE(shared network stack) 
  - Pod and Pod communication on different Node is via Overlay Network(Flannel + etcd)
  - Pod and Pod communication on same Node via networkbridge, no need Flannel
  - Pod and service communication is via IPtables(newer version use LVS)
  - External access to Pod requires Service node port


ReplicationController & ReplicaSet & Deployment
  - ReplicationController:  maintain expected number of replications
  - ReplicaSet: same as ReplicationController in new version K8S. better sytax support
  - it is recommended that use ReplicaSet alone with Deployment. because ReplicaSet does not support rolling-update but deployment supports it

HPA(Horizontal Pod Autoscaling)
StatefulSet: docker for stateless application. StatefulSet is for stateful appllication like database
DaemonSet:ensure all node (or some) running a replication of Pod
Job and CronJob
  - Job one time running task, i.e. batch task
  - Cron Job: task running on specific time 

Service: How we discover IP address of the individual pod(Could be cluster of pods)
  - Load balancer on top of group of Pods(deployment)


Deployment: alone with RC(replicaSet) to maintain expected number of replications on Pods(group of Pods)


Ingress controller: load balacing<nginx implemention>

each Pod has its own IP(can use duplicated port consumed by other Pods)
each Service has its own domain(can use duplicated port consumed by other Services)
NodePort cannot be duplicated

NodePort - port exposed on the host machine(Postman can reach)
targetPort - This is the actual port on which your application is running inside the container.
port - port for service and redirect to targetPort

------------------------
ETCD Storage
 - v2 is in memory database and v3 is local database
 - K8S cluster using Etcd v3 and v2 has been deprecated in K8S v1.11


