Architecture
  Components 
    Openshift Container Registry(OCR) ----(pull)---> Images ----(build)---> Container ---(deploy)---> POD ----> Deployments----> Service
            ^
            |
    Openshift CI/CD   <---- SCM(Source Code Management System) <---- Users & Projects  (Openshift web console) 
    
    
Management Tools
  - Web Console
  - CLI
  - Restful API

Projects & Users
  - Project build on top of K8S namespace and all projects are isolated
  - Openshift uses OAuth server to "Allow All" by default 
    - configured by "etc/openshift/master/master-config.yaml"
  - Users
    - Regular user - developer
    - System - system:admin system:master
    - Service - system:serviceaccount:proj1:db_user
    
 - commands 
   oc get projects
   oc get users
   
   
SCM, Builds and Deployments in OPENSHIFT
  - Openshift will do following work automatically, no additional configuration is needed
  Build
    - Create build (given git url) -> Download Source -> Build Image -> Push to Docker Registry -> 
  Deployment
    - Deploy image from Docker Registry to K8S cluster (Note that Openshift yaml format is different from K8S)
    
  
  Build
    Source: git repo url
    Build Strategy
      1) Dokcer Build use Dockerfile, if this strategy is chosen then it requires Dockerfile in the project repo 
      2) Source-To-Image(S2I)
      3) Custom Strategy
    Output to image registry
      Image Streams: resolves issue that third party docker registry have updated lastest version
      
    TriggerBuild
      - above configurations are for manually process
      - trigger will be execute at the time that events(Could be push changes to codebase) take place
      
      
---------------------------------------------------------------------------------------------------
      
Example build-config.yaml

kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "example-webapp-docker"
spec:
  runPolicy: "Serial"
  triggers:
    - type: "GitHub"
    github:
      secret: "b32345esdfgllnhljj"
    - type: "Generic"
      generic:
        secret: "458sd9g0hsdfss"
    - type: "ImageChange"
  source:
    git:
      uri: "https://github.com/example-web-docker.git"
      
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: "DockerImage"
        name: "ubuntu:15.04"
        
    output:
      to:
        kind: "ImageStreamTag"
        name: "simple-webapp:lastest"
        
---------------------------------------------------------------------------------
Deployment 
  image <- containers <- pods <- Replication controller <- Deployment controller (deployment-config.yaml is where config replication and deployment)



Example deployment-config.yaml

apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: sample-webapp-docker
spec:
  replicas: 1
  selector:
    deploymentconfig: sample-webapp-docker
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: sample-webapp-docker
          deploymentconfig: sample-webapp-docker
      spec:
        containers:
          - image: myproject/sample-webapp-docker
            imagePullPolicy: Always
            name: sample-webapp-docker
            ports:
              - containerPort: 8080
                protocol: TCP
                
  triggers:
    - imageChangeparams:
        automatic: true
        containerNames:
          - sample-webapp-docker
        from:
          kind: ImageStreamTag
          name: 'sample-webapp-docker:lastest'
          namespace: myproject
        lastTriggerdImage: >-
          172.30.1.1:5000/myproject/sample-webapp-docker@sha256:asdfasdgasdf545679847541361d5a1f6d496a1sdf1
      type: ImageChange
      
    - type:ConfigChange  
------------------------------------------------------
Networking
  Service: same as K8S, each service has its cluster IP. 
  Route: help service expose to external users
    - Load Balancing
      - source
      - roundrobin
      - leastconn

Example service-config.yml

apiVersion: v1
kind: Service
metadata:
  name: simple-webapp-docker
spec:
  selector:
    deploymentconfig: simple-webapp-docker
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080


Example route-config.yml
