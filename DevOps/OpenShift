Core Concepts
  Builds
    - A build is the process of transforming input parameters into a resulting object. Most often, the process is used to transform input parameters or source code into a runnable image. A BuildConfig object is the definition of the entire build process.

  Pipelines
    - A pipeline is a build strategy allows developers to define a Jenkins pipeline for execution by the Jenkins pipeline plugin. The build can be started, monitored, and managed by OpenShift Container Platform in the same way as any other build type.
    Pipeline workflows are defined in a Jenkinsfile, either embedded directly in the build configuration, or supplied in a Git repository and referenced by the build configuration.
    - The first time a project defines a build configuration using a Pipeline strategy, OpenShift Container Platform instantiates a Jenkins server to execute the pipeline. Subsequent Pipeline build configurations in the project share this Jenkins server.

  Image Streams
    - An image stream comprises any number of Docker-formatted container images identified by tags. It presents a single virtual view of related images, similar to an image repository, and may contain images from any of the following:
      - Its own image repository in OpenShift Container Platformâ€™s integrated registry
      - Other image streams
      - Image repositories from external registries


  Deployments
    - Deployments are an Open Shift enhancement underpinned by the key Kubernetes concept of a Replication Controllers. 

  Replication Controller
    - A replication controller ensures that a specified number of replicas of a pod are running at all times. If pods exit or are deleted, the replication controller acts to instantiate more up to the defined number. Likewise, if there are more running than desired, it deletes as many as necessary to match the defined amount.
    = A replication controller configuration consists of:
      - The number of replicas desired (which can be adjusted at runtime).
      - A pod definition to use when creating a replicated pod.
      - A selector for identifying managed pods.

  Deployment
    - Building on replication controllers, OpenShift Container Platform adds expanded support for the software development and deployment lifecycle with the concept of deployments. In the simplest case, a deployment just creates a new replication controller and lets it start up pods. However, OpenShift Container Platform deployments also provide the ability to transition from an existing deployment of an image to a new one and also define hooks to be run before or after creating the replication controller.
    - The OpenShift Container Platform DeploymentConfiguration object defines the following details of a deployment:
      - The elements of a ReplicationController definition.
      - Triggers for creating a new deployment automatically.
      - The strategy for transitioning between deployments.
      - Life cycle hooks.
      - Each time a deployment is triggered, whether manually or automatically, a deployer pod manages the deployment (including scaling down the old replication controller, scaling up the new one, and running hooks). The deployment pod remains for an indefinite amount of time after it completes the deployment in order to retain its logs of the deployment. When a deployment is superseded by another, the previous replication controller is retained to enable easy rollback if needed.

  Routes
    -  OpenShift Container Platform route exposes a service at a host name, like www.example.com, so that external clients can reach it by name.

  Templates
    - An OpenShift template (in json or yaml format) describes all the above objects (container, images, pod, service, build, image stream, deployment, route, etc) to build and deploy a service. 
-----------------------------------------------------------------------

Architecture
  Components 
    Openshift Container Registry(OCR) ----(pull)---> Images ----(build)---> Container ---(deploy)---> POD ----> Deployments----> Service
            ^
            |
    Openshift CI/CD   <---- SCM(Source Code Management System) <---- Users & Projects  (Openshift web console) 
    
    
Management Tools
  - Web Console
  - CLI
  - Restful API

Projects & Users
  - Project build on top of K8S namespace and all projects are isolated
  - Openshift uses OAuth server to "Allow All" by default 
    - configured by "etc/openshift/master/master-config.yaml"
  - Users
    - Regular user - developer
    - System - system:admin system:master
    - Service - system:serviceaccount:proj1:db_user
    
 - commands 
   oc get projects
   oc get users
   
   
SCM, Builds and Deployments in OPENSHIFT
  - Openshift will do following work automatically, no additional configuration is needed
  Build
    - Create build (given git url) -> Download Source -> Build Image -> Push to Docker Registry -> 
  Deployment
    - Deploy image from Docker Registry to K8S cluster (Note that Openshift yaml format is different from K8S)
    
  
  Build
    Source: git repo url
    Build Strategy
      1) Dokcer Build use Dockerfile, if this strategy is chosen then it requires Dockerfile in the project repo 
      2) Source-To-Image(S2I)
      3) Custom Strategy
    Output to image registry
      Image Streams: resolves issue that third party docker registry have updated lastest version
      
    TriggerBuild
      - above configurations are for manually process
      - trigger will be execute at the time that events(Could be push changes to codebase) take place
      
      
---------------------------------------------------------------------------------------------------
      
Example build-config.yaml

kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "example-webapp-docker"
spec:
  runPolicy: "Serial"
  triggers:
    - type: "GitHub"
    github:
      secret: "b32345esdfgllnhljj"
    - type: "Generic"
      generic:
        secret: "458sd9g0hsdfss"
    - type: "ImageChange"
  source:
    git:
      uri: "https://github.com/example-web-docker.git"
      
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: "DockerImage"
        name: "ubuntu:15.04"
        
    output:
      to:
        kind: "ImageStreamTag"
        name: "simple-webapp:lastest"
        
---------------------------------------------------------------------------------
Deployment 
  image <- containers <- pods <- Replication controller <- Deployment controller (deployment-config.yaml is where config replication and deployment)



Example deployment-config.yaml

apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: sample-webapp-docker
spec:
  replicas: 1
  selector:
    deploymentconfig: sample-webapp-docker
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          app: sample-webapp-docker
          deploymentconfig: sample-webapp-docker
      spec:
        containers:
          - image: myproject/sample-webapp-docker
            imagePullPolicy: Always
            name: sample-webapp-docker
            ports:
              - containerPort: 8080
                protocol: TCP
                
  triggers:
    - imageChangeparams:
        automatic: true
        containerNames:
          - sample-webapp-docker
        from:
          kind: ImageStreamTag
          name: 'sample-webapp-docker:lastest'
          namespace: myproject
        lastTriggerdImage: >-
          172.30.1.1:5000/myproject/sample-webapp-docker@sha256:asdfasdgasdf545679847541361d5a1f6d496a1sdf1
      type: ImageChange
      
    - type:ConfigChange  
------------------------------------------------------
Networking
  Service: same as K8S, each service has its cluster IP. 
  Route: help service expose to external users
    - Load Balancing
      - source
      - roundrobin
      - leastconn

Example service-config.yml

apiVersion: v1
kind: Service
metadata:
  name: simple-webapp-docker
spec:
  selector:
    deploymentconfig: simple-webapp-docker
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080


Example route-config.yml


template = catalog is where composing above config

Example template-config.yaml
apiVersion: v1
kind: Template
metadata: 
  name: custom-app
objects:
- apiVersion: v1
  kind: Secret
  <...code hidden...>
  
- apiVersion: v1
  kind: Service
  <...code hidden...>
  
- apiVersion: v1
  kind: Service
  <...code hidden...>
  
- apiVersion: v1
  kind: Route
  <...code hidden...>
  
  
- apiVersion: v1
  kind: BuildConfig


- apiVersion: v1
  kind: DeploymentConfig
  <...code hidden...>
  
- apiVersion: v1
  kind: DeploymentConfig
  <...code hidden...>
  
  
- apiVersion: v1
  kind: ImageStream
  <...code hidden...>
  
parameters:
  - displayName: "Namespace"
    name: "NAMESPACE"
    
    
How to create template via CLI?  oc create -f template-config.yml
Not sure how to create pariticular kind of yml file? oc export service db
  
  
  
