Image
    # download image
    docker pull nginx

    # download specific image
    docker pull redis:6.2.4

    # check all downloaded images
    docker images

    # remove docker image 
    docker rmi <IMAGE ID>

Container
    docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

    # -d  -> Runing docker container in background
    # --restart=always -> rebooting docker also restart container
    # -p -> IP mapping from <RUNNING MACHINE> to <CONTAINER> 
    docker run --name=mynginx  -d  --restart=always -p 88:80 nginx

    # check all running containers
    docker ps
    
    # check all containers(including stopped container)
    docker ps -a

    # delete container 
    docker rm  <CONTAINER_ID>/<NAME>
    
    # force to deleting container are currently running  
    docker rm -f mynginx   

    # Stop container
    docker stop <CONTAINER_ID>/<NAME>
    
    # restart container
    docker start <CONTAINER_ID>/<NAME>

    # update container setting 
    docker update <CONTAINER_ID>/<NAME> --restart=always


Change Application Setting inside Container 
    1) Change internal setting
        # enter into application inside container 
        docker exec -it <CONTAINER_ID>/<NAME> /bin/bash

        # check running container logs 
        docker logs <CONTAINER_ID>/<NAME> 

        # mouting container config file with running machine 
        docker run -d -p 80:80 \
        -v /data/html:/usr/share/nginx/html:ro \
        -v /data/conf/nginx.conf:/etc/nginx/nginx.conf \
        --name mynginx-02 \
        nginx


        # Copy the config file of container into current running machine
        docker cp 5eff66eec7e1:/etc/nginx/nginx.conf  /data/conf/nginx.conf
        # Copy the config file of current running machine into container 
        docker cp  /data/conf/nginx.conf  5eff66eec7e1:/etc/nginx/nginx.conf

    2) Mounting to external setting 
        docker run --name=mynginx   \
        -d  --restart=always \
        -p  88:80 -v /data/html:/usr/share/nginx/html:ro  \
        nginx


Commit Changes
    1)  Commit to local docker (like git local repo)

    docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
    docker commit -a "MESSAGE HERE"  -m "YOUR CHANGE" 341d81f7504f guignginx:v1.0

    2) Image Transfer 
        # packaging docker container into tar files
        docker save -o abc.tar guignginx:v1.0

        # share tar files with other machine and other machine can load this tar file into its container local repo
        docker load -i abc.tar


Pushing to Remote Repo 
    # tagname is version number
    docker tag local-image:tagname new-repo:tagname
    docker push new-repo:tagname

    # change old image name into new name that repo requires
    docker tag guignginx:v1.0 leifengyang/guignginx:v1.0

    # login docker hub
    docker login       
    docker logout

    # Push to remote repo
    docker push leifengyang/guignginx:v1.0


    # Now other machine can pull
    docker pull leifengyang/guignginx:v1.0


Build Application with docker
    
    1) Setup Dockerfile in project 
        simple example:
            FROM openjdk:8-jdk-slim
            LABEL maintainer=leifengyang
            COPY target/*.jar   /app.jar
            ENTRYPOINT ["java","-jar","/app.jar"] # also can use CMD

    2) Running the command build application into images
        docker build -t java-demo:v1.0 .
    
    3) Run application in docker
        docker run -d -p 8080:8080 --name myjava-app java-demo:v1.0 
        
       if need to share image
            # login docker hub
            docker login

            # naming old imange
            docker tag java-demo:v1.0  leifengyang/java-demo:v1.0

            # pushing to docker hub
            docker push leifengyang/java-demo:v1.0

            # Other machine now can pull it
            docker pull leifengyang/java-demo:v1.0

            # Other machine now can run it
            docker run -d -p 8080:8080 --name myjava-app java-demo:v1.0 
            
     4) Deploy middleware
            docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

            # Start redis with customized settings

            docker run -v /data/redis/redis.conf:/etc/redis/redis.conf \
            -v /data/redis/data:/data \
            -d --name myredis \
            -p 6379:6379 \
            redis:latest  redis-server /etc/redis/redis.conf


https://www.yuque.com/leifengyang/oncloud/kgheaf
