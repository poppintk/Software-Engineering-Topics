DEPTH:
The depth of a node is the number of edges from the node to the tree's root node.
A root node will have a depth of 0.
HEIGHT:
The height of a node is the number of edges on the longest path from the node to a leaf.
A leaf node will have a height of 0.

1) edge case
// terminate at left subtree of leaves
if(root.left != null && root.left.left == null && root.left.right == null) return;



// terminate at leaf (don't forget operation on leaf like add root.val if required)
if(root == null) return;// edge case
if(root.left == null && root.right == null) return;
recurse(root.left);
recurse(root.right);

// terminate at null;
if(root == null) return;
recurse(root.left);
recurse(root.right);

// either one is null
if(root == null) return;// edge case
if(root.left == null && root.right == null) return;
if(root.left == null || root.right == null) return; // either one is null
recurse(root.left);
recurse(root.right);

129. Sum Root to Leaf Numbers
//tail recursion, recursion type 1 -> through return value
private int dfs(TreeNode root, Integer sum){
    if(root == null) return 0; //edge case
    if(root.left == null && root.right == null) return sum * 10 + root.val;
    return dfs(root.left, sum * 10 + root.val) + dfs(root.right, sum * 10 + root.val);
}
//note: if case can not pass with tree like [1,0]
//then try
// if(root.left == null) return dfs(root.right, num*10 + root.val);
// if(root.right == null) return dfs(root.left, num*10 + root.val);
public int dfs1(TreeNode root, int num){
    if(root == null) return num; //edge case
    if(root.left == null && root.right == null) return num * 10 + root.val;
    if(root.left == null) return dfs(root.right, num*10 + root.val);
    if(root.right == null) return dfs(root.left, num*10 + root.val);
    return dfs(root.left, num * 10 + root.val) + dfs(root.right, num * 10 + root.val);
}
--------------------------------------------------------------------------------------------------------------------------
222. Count Complete Tree Nodes recursion type 2 -> count numbers
// non tail recursion (there is log(2n) algorithm,but following solves general tree nodes problem)
public int countNodes(TreeNode root) {
    if(root == null) return 0;
    return 1 + countNodes(root.left) + countNodes(root.right);
}
--------------------------------------------------------------------------------------------------------------------------
//98. Validate Binary Search Tree
         6
       /   \
      3     8 
     / \   / \ 
    2  5  7   9
In a Binary Search Tree, the sorted array can be constructed from inorder travasal
like. [2,3,5,6,7,8,9]
    
// keep tracking of max and min
// left update max(since left subtree less than root), right update min(since right greater than root).
// recursion type 3 -> return boolean
public boolean recurse(TreeNode root, Integer max, Integer min){
    if(root == null) return true;
    if(min != null && root.val <= min) return false;
    if(max != null && root.val >= max) return false;
    
    //Note: above two lines codes can be simplified into
    //if((min != null && root.val <= min) || (max != null && root.val >= max)) return false;
    
    return recurse(root.left, root.val, min) && recurse(root.right, max, root.val);
}
public boolean isValidBST(TreeNode root) {
    return recurse(root,null,null);
}
--------------------------------------------------------------------------------------------------------------------------
//199. Binary Tree Right Side View
// recursion type 4 -> no return type
public List<Integer> rightSideView(TreeNode root) {
    List<Integer> result = new ArrayList<>();
    dfs(root, 0, result);
    return result;
}
public void dfs(TreeNode root, int depth, List<Integer> result){
    if(root == null) return;
    if(result.size() == depth) result.add(root.val); // trick two
    dfs(root.right, depth + 1, result);// trick one
    dfs(root.left, depth + 1, result);
}

--------------------------------------------------------------------------------------------------------------------------
1) preorder, inorder, post order travasal
// preorder
public void preorder(TreeNode root){
    if(root == null) return;
    System.out.println(root.val);
    preorder(root.left);
    preorder(rootright);
}
// iterative pre-order
private List<Integer> result = new ArrayList<>();
public List<Integer> preorderTraversal(TreeNode root) {
    Stack<TreeNode> stack = new Stack<>();
    pushAllLeft(root,stack);
    TreeNode cur = null;
    while(!stack.isEmpty()){
        cur = stack.pop();
        pushAllLeft(cur.right,stack);
    }
    return result;
}
public void pushAllLeft(TreeNode root,Stack<TreeNode> stack){
    TreeNode cur = root;
    while(cur != null){
        result.add(cur.val);
        stack.add(cur);
        cur = cur.left;
    }
}

// inorder
public void preorder(TreeNode root){
    if(root == null) return;
    preorder(root.left);
    System.out.println(root.val);
    preorder(rootright);
}
// iterative inorder
public List<Integer> iterative(TreeNode root) {
    List<Integer> result = new ArrayList<>();
    Stack<TreeNode> stack = new Stack<>();
    pushAllLeft(root,stack);
    TreeNode cur = null;
    while(!stack.isEmpty()){
        cur = stack.pop();
        result.add(cur.val);
        pushAllLeft(cur.right,stack);
    }
    return result;
}
public void pushAllLeft(TreeNode root,Stack<TreeNode> stack){
    TreeNode cur = root;
    while(cur != null){
        stack.add(cur);
        cur = cur.left;
    }
}

// post order
public void postorder(TreeNode root){
    if(root == null) return;
    preorder(root.left);
    preorder(root.right);
    System.out.println(root.val);
}
// iterative post order
// 145. Binary Tree Postorder Traversal
public List<Integer> postorderTraversal(TreeNode root) {
    LinkedList<Integer> ans = new LinkedList<>();
    Stack<TreeNode> stack = new Stack<>();
    if (root == null) return ans;
    stack.push(root);
    while (!stack.isEmpty()) {
        TreeNode cur = stack.pop();
        if (cur.left != null) stack.push(cur.left);
        if (cur.right != null) stack.push(cur.right);
        ans.addFirst(cur.val);
    }
    return ans;
}
---------------------------------------------------------------------------------------------------------------------------
1008. Construct Binary Search Tree from Preorder Traversal

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return dfs(preorder, 0, preorder.length-1);
    }
    public TreeNode dfs(int[] preorder, int preStart, int preEnd) {
        if(preStart == preorder.length || preStart > preEnd) return null;
        
        int rootVal = preorder[preStart];
        TreeNode root = new TreeNode(rootVal);
        // find next index that greater than rootVal value
        int nextIdx = 0;
        for(int i = preStart; i < preorder.length; i++){
            if(preorder[i] <= rootVal){
                nextIdx = i;
            }else{
                break;
            }
        }
        root.left = dfs(preorder, preStart + 1, nextIdx);
        root.right = dfs(preorder, nextIdx + 1, preEnd);
        return root;
    }
}


END 1008. Construct Binary Search Tree from Preorder Traversal
--------------------------------------------------------------------------------------------------------------------------

105. Construct Binary Tree from Preorder and Inorder Traversal
preorder
     1
   /   \
  2     3 
 /     /
4     5
//practice trace
preorder : [1,2,4,3,5] prestart, preend
inorder: [4,2,1,5,3] instart, inend

inIdx = inMap.get(preorder[prestart])
leftSubTree: 
    prestart = prestart + 1, 
    preend = prestart + inIdx - instart,
    instart = instart, 
    inend = inIdx - 1;
rightSubTree: 
    prestart = prestart + inIdx - instart + 1, 
    preend = preend,
    instart = InIdx+1, 
    inend = inend;
--------------------------------------------------------------------------------------------------------------------------
106. Construct Binary Tree from Inorder and Postorder Traversal
     1
   /   \
  2     3 
 /     /
4     5

Postorder : [4,2,5,3,1] poststart, postend
inorder: [4,2,1,5,3] instart, inend

leftSubTree: 
    poststart = poststart
    postend = poststart + inIdx - instart -1,
    instart = instart,
    inend = inIdx - 1;
rightSubTree: 
    poststart = poststart + inIdx - instart
    postend = postend - 1, 
    instart = InIdx+1, 
    inend = inend;

--------------------------------------------------------------------------------------------------------------------------
236. Lowest Common Ancestor of a Binary Tree
235. Lowest Common Ancestor of a Binary Search Tree

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if(root == null || root == p || root == q) return root;

    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);

    if(left != null && right != null){
        return root;
    }else if(left == null){
        return right;
    }else if(right == null){
        return left;
    }

    return null;
}
--------------------------------------------------------------------------------------------------------------------------
//116. Populating Next Right Pointers in Each Node
//117. Populating Next Right Pointers in Each Node II
 public Node connect(Node root) {
    Node head = root;
    Node dummy = new Node(-1);
    Node nextlvl = dummy;

    while(head != null){
        // constructing next level
        if(head.left != null){
            nextlvl.next = head.left;
            nextlvl = nextlvl.next;
        }
        // constructing next level
        if(head.right != null){
            nextlvl.next = head.right;
            nextlvl = nextlvl.next;
        }
        // constructing next level
        head = head.next;

        // end of the level
        if (head == null) {
            // head to next head of level
            head = dummy.next;
            // set dummy node next to null
            dummy.next = null;
            nextlvl = dummy;
        }
    }
    return root;
}


--------------------------------------------------------------------------------------------------------------------------

112. Path Sum (base case end from leaves)
113. Path Sum II (end from leaves + backtracking on temp)

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(root, sum , result, path);
        return result;
    }
    public void dfs(TreeNode root, int sum,List<List<Integer>> result,List<Integer> path){
        if(root == null) return;
        if(root.left == null && root.right == null&& sum - root.val == 0){
            path.add(root.val);
            result.add(new ArrayList<>(path));
            path.remove(path.size()-1);
            return;
        }
        path.add(root.val);
        dfs(root.left, sum - root.val, result, path);
        dfs(root.right, sum - root.val, result, path);
        path.remove(path.size() -1);
    }
}

257. Binary Tree Paths

--------------------------------------------------------------------------------------------------------------------------
114. Flatten Binary Tree to Linked List
private TreeNode next = null;
public void flatten(TreeNode root) {
    if(root == null) return;
    flatten(root.right);
    flatten(root.left);
    // post order
    root.right = next;
    root.left = null;
    next = root;
}
---------------------------------------------------------------------------------------------------------------------------
543. Diameter of Binary Tree
class Solution {
    private int max = Integer.MIN_VALUE;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        longestPath(root);
        return max;
    }
    
    public int longestPath(TreeNode root){
        if(root == null) return -1;
        int l = longestPath(root.left) + 1;
        int r = longestPath(root.right) + 1;
        max = Math.max(max, l+r);
        return Math.max(l,r);
    }
}

END 543. Diameter of Binary Tree
----------------------------------------------------------------------------------------------------------------------------
404. Sum of Left Leaves
    3
   / \
  9  20
    /  \
   15   7

class Solution {
    int ans = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;
        int sum = 0;
        if(root.left != null && root.left.left == null && root.left.right == null){
            sum = root.left.val; // NOTE: can not just return sum from here, since above case will just return 9
        }
        return sum + sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);
    }
}
END 404. Sum of Left Leaves
----------------------------------------------------------------------------------------------------------------------------
100. Same Tree
101. Symmetric Tree
104. Maximum Depth of Binary Tree
107. Binary Tree Level Order Traversal II
110. Balanced Binary Tree
94. Binary Tree Inorder Traversal
144. Binary Tree Preorder Traversal
145. Binary Tree Postorder Traversal
124. Binary Tree Maximum Path Sum
