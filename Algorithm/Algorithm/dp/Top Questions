划分型  
139 word break
279. Perfect Squares
91. Decode Ways

坐标型  
動態規劃方程f[i]中的下標i 表示以 序列[i] 為結尾的滿足條件的子序列的性質. f[i][j]中的下標i, j 表示以格子(i,j)為結尾的滿足條件的路徑的性質
-最大值/最小值
-個數
-是否存在

120. Triangle
55. Jump Game (This can be improved by using greedy)
152. Maximum Product Subarray
63. Unique Paths II  
62. Unique Paths
64. Minimum Path Sum

序列型
前i個。。 遵守某種序列規則 最小/方式數/可行性
256. Paint House （515. Paint House）

雙序列型
72. Edit Distance
10. Regular Expression Matching

背包型 Unbound Knapsack

322. Coin Change

983. Minimum Cost For Tickets

92.BackPack (lintcode) each item only used once 
这道题不能用 先sort 在找sum 的方式， 因为最大值可能不是来自连续的序列

可行性背包
求不超過Target時拼出的最大重量
State: dp[i][w] = 前i個物品能不能拼出重量w
Recurrence: dp[i][m] = dp[i-1][m] OR dp[i-1][m - A[i-1]]
init: dp[0][0] = true; dp[0][1...w] = false;
final ans在最後一row中，後面數過來，第一個為true的 column index

計數型背包
求有多少種方式拼出重量target
無value/price demension
563. Backpack V (lintcode) items only used once, Find the number of possible fill the backpack
State: dp[i][w] = 前i個物品有多少種方式拼出重量w
Recurrence: dp[i][m] = dp[i-1][m] + dp[i-1][m - A[i-1]]
init: dp[0][0] = 1; dp[0][1...w] = 0;
final ans at dp[n][m]

562 vs 564
564. Backpack VI / Combination Sum IV (lintcode),each item can be used many times. find the number of possible combinations that add up to a weight w
State: dp[i] = 有多少種組合能拼出重量i
Recurrence: dp[w] = dp[w - Ai] where i = 0....A.length-1
init: dp[0] = 1;
final ans at dp[w]

最值型背包
求能拼出的最大價值
125. Backpack II, items only used once, What's the maximum value can you put into the backpack?
State: dp[i][w] = 前i個物品拼出重量w能得到的最大價值
Recurrence: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - A[i-1]] + V[i-1])
init: dp[0][0] = 0; dp[0][1...w] = -1;//價值為-1表示不可能
final ans is at max(last row)

Backpack III, items can be used many times, What's the maximum value can you put into the backpack?
State: dp[i][w] = 前i個物品拼出重量w能得到的最大價值
Recurrence: dp[i][w] = max(dp[i-1][w], dp[i][w-A[i-1]] + V[i-1])
init: dp[0][0] = 0; dp[0][1...w] = -1;//價值為-1表示不可能
final ans is at max(last row)

位操作型

