
class Knapsack {
  static int solveKnapsack(int[] profits, int[] weights, int capacity) {
    //state: capacity, number of items
    // dp[i][w]: maxiumum profit of given weight and up to i items
    // recurrance relation:
    // dp[i][j] = Math.max(choose, notChoose);
    // => dp[i][j] = Math.max(profits[i-1]+ dp[i-1][j - weights[i-1]], dp[i-1][j]);

    int[][] dp = new int[profits.length+1][capacity+1];
    //base case
    for(int g = 0; g < dp.length;g++){
      dp[0][g] = 0;
      dp[g][0] = 0;
    }

    for(int i = 1; i < dp.length; i++){
      for(int j = 1; j < capacity+1;j++){
        if (j - weights[i-1] < 0) { // edge case
            // 这种情况下只能选择不装入背包
            dp[i][j] = dp[i - 1][j];
        } else {
            dp[i][j] = Math.max(
              // profits[i-1] due to i start from 1 not 0
              profits[i-1] + dp[i-1][j - weights[i-1]],
              dp[i-1][j]
            );
        }
      }
    }

    return dp[weights.length][capacity];
  }
}
----------------------------------------------------------------------------------------------------------------------------------
416. Partition Equal Subset Sum

class Solution {
    public boolean canPartition(int[] nums) {
        // state: index, target half sum
        // dp[i][s]: whether or not can be formed a subsetSum addup equal to s with i items
        // choice: dp[i][s] = choose || not choose
        // => dp[i][s] = dp[i-1][s-nums[i-1]] || dp[i-1][s] 
        // base case:
        
        //get sum
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum+= nums[i];
        }
        if(sum % 2 != 0) return false;
        
        boolean[][] dp = new boolean[nums.length + 1][sum / 2 + 1];
        
        for(int k = 0; k < dp.length; k++){
            //base case 就是 dp[..][0] = true 和 dp[0][..] = false，因为背包没有空间的时候，就相当于装满了，而当没有物品可选择的时候，肯定没办法装满背包。
            dp[k][0] = true;
        }
        
        for(int i = 1; i < dp.length; i++){
            for(int s = 1; s < dp[0].length;s++){
                if(s - nums[i-1] < 0){
                    dp[i][s] = dp[i-1][s];
                }else{
                    dp[i][s] = dp[i-1][s-nums[i-1]] || dp[i-1][s];
                } 
            }
        }
        
        return dp[nums.length][sum/2];
    }
}
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
