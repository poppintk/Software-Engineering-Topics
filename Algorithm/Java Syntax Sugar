 PriorityQueue<Integer> queue = new PriorityQueue<Integer>(3, new Comparator() {
      @Override
      public int compare(Integer o1, Integer o2) {
          return o1 - o2;
      }
  });
  
  PriorityQueue<Integer> queue1 new PriorityQueue<Integer>(3,(a, b) -> a - b);
  

public int compare(final Person a, Person b) {
 //TODO return 1 if b should be before a 
 //     return -1 if a should be before b
 //     return 0 otherwise (meaning the order stays the same)
 }

a - b 
That's in case you want to sort in ascending order : from smallest number to largest number.
----------------------------------------------
int[] dp = new int[nums.length];
// dp 数组全都初始化为 1
Arrays.fill(dp, 1);

Map<String,Integer> map = new HashMap<>();
map.put(word, map.getOrDefault(word, 0) + 1);
=> 
// must be either condition
if(!map.containsKey(word)){
  map.put(word, 1);
}else{
  map.put(word,map.get(word) + 1)
}


Queue<String> pq = new PriorityQueue<>((a, b) -> a-b)
pq.offer(str); // offer() or add()
pq.poll();




int[][] newEdges = new int[2][3];
Queue<int[]> pq = new PriorityQueue<>(newEdges.length, (e1, e2) -> Integer.compare(e1[2], e2[2]));
pq.addAll(Arrays.asList(newEdges)); // Note: syntax sugar

API:
static <T> List<T>	asList(T... a)

i.e. List<Integer> a = Arrays.asList(1,2,3);

for (char c : str.toCharArray()) { // looping String array

}

convert string into char[]
=> str.toCharArray()
convert char[] into string
=> String.valueOf(char[])

---------------------------------------------------------------------
//从大到小排序
Arrays.sort(numbers, comparator.reversed());// only works for Integer[] but not int[]

Collections.sort(temp); // for List<Integer>
//Note: those are in place sort will not return anything
Collections.sort(temp, Collections.reverseOrder())

Collections.reverse(temp);


----------------------------------------------------------------------------------------------
Random r = new Random();
r.nextInt(n); // this will return a ramdom number from [0.....n-1]
-------------------------------------------------------------------------------------------
TreeMap<Integer, Integer> map = new TreeMap<>();
// from 520. Consistent Hashing II
// ceilingKey will return the key which is equal or greater than the given key(hashcode)
if (map.ceilingKey(hashcode) == null) return map.firstEntry().getValue();
// ceilingEntry will return the entry which is equal or greater than the given key(hashcode)
return map.ceilingEntry(hashcode).getValue();

-------------------------------------------------------------------------------------------
Round Up a number
8/2 = 4
9/2 = 5
a/b
Math.ceil(a/b)
OR
int num = ((a - 1) / b) + 1;

Round down a number 
8/2 = 4
9/2 = 4
Math.floor(a/b)
OR
int num = a / b;
