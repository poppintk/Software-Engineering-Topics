assume all array here is increasing order
注意用开区间或者闭区间是有 起始search range 决定的 
比如left = 0,right = arr.length(condition 1), while(left < right) (condition2) 这是开区间 [left,right)
当 left = 0, right = arr.length -1(condition 1), while(left <= right) (condition2) 这是闭区间 [left,right] 


g(x) is a function that
exists m s.t. if x >= m g(x) > 0(true) else g(x) <= 0


g(x) 判断 解在左边还是右边，
如果g(x)为true, 解在左边, 否则右边
最后 l 为最小的value, g(x)为true

如何取得g(x)？
-方法一： 通过判断关系什么时候为左边，何时为右边

Template 1
[l,r)
左闭右开

if(n == Integer.MAX_VALUE) return n;
缺点： r存在overflow的情况， 比如是upper bound 的上限 Integer.MAX_VALUE

binarySearch(l, r):
	while l < r:
		m = l + (r - l) /2
		if f(m): return m # optional
		if g(m): r = m # new range [l, m)
		else l = m + 1 # new range [m+1, r)

	return l # 如果有f(m)存在， return -1
	
Time Complexity:
O( log(r-1) *(f(m) + g(m)) )

# where l is smallest number m in range [l,r) such that g(m) is true, 

//69. Sqrt(x)

//704. Binary Search
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length;
        
        while(left < right){
            int mid = left + (right - left)/2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > target){
                //g(x), such that x >= target g(x)>0 (true), otherwise false
                right = mid;
            }else{
                left = mid +1;
            }
        }
    	# where l is smallest number m in range [l,r) such that nums[mid] > target is true, 
        return -1;
    }
}


Tempate 2
[l,r]
闭区间
binarySearch(l,r):
	while(l <= r):
		m = l + (r-l)/2
		if f(m): return m # optional
		if g(m): r = m - 1 # new range [l, m -1]
		else: l = m + 1 # new range [m+1, r]

	return l # 如果有f(m)存在， return -1
# where l is smallest number m in range [l,r] such that g(m) is true, 




注意使用 闭区间 [l, r] 容易死循环
功能上没有区别

The key to binary search is not trying to find the exact answer, but find a split point m such that   for all n, n >= m,  conditions are satisfied, then m will naturally become the answer for free




Example 1: return the index of an element in a sorted array. Elements are unique.
If not found return -1;

A = [1, 2, 5, 7, 8, 12]
search(8) = 4, search(6) = -1

Public int binarySearch(A, val, l, r):
	while( l < r):
		mid = l + (r -l)/2;
		if(A[mid] == val): return mid;
		if(A[mid] > val) r = m;
		else l = m + 1;	
	return -1;
	
	
	
NOTE: if input array has duplicated values, then we should never use if(arr[mid] == target) return mid;
because it will return imediately for the abitary mid index which might not be the right answer.
----------------------------------------------------------------------------------------------------------------------------			
leetcode 875
reference: https://labuladong.gitbook.io/algo/gao-pin-mian-shi-xi-lie/koko-tou-xiang-jiao


https://buptwc.com/2019/11/04/二分法系列详解/
什么情况下用二分
对于我们做题来说，就是怎么看一道题是二分。
先给出结论，如果满足下面任意一个条件，则很有可能是二分：

从题意来看：题目给出一大堆限制条件，然后让你找一个数，这个数要满足那个条件
从数据范围来看：限制是O(nlogn)的解法
鉴于有很多没看过我以前题解的人，在这里再写一下数据范围相关的结论
n 达到 10^4，不能用O(n^2)
n 达到 5*10^6， 不能用O(nlogn)
也就是说，假设题目给一个 n < 10^6，那么很有可能是O(nlogn)的解法。

分析：
1)去找一个值满足某种条件，这种题见得太多了，显然是二分法，之后我整理一下所有的这种题目做一个合辑。
find smallest number x in range [l,r] such that g(x) is true
2)那么这里怎么选定初始的lo和hi呢？我们要明确我们找的是吃的速度，那么最低，起码得在吃吧，
所以起码lo = 1，那hi呢？我们注意到note中第二点pile.length <= H，因为我们吃的速度就算再快，
一次也只能吃一盘而已，所以无论怎样最少都得pile.length个小时才能吃完，所以hi = max(piles)

// ceil(p/m) == (p + m - 1) / m 
// if using java Math.ceil((double)p/m) is a lot more slower
k += (p + mid -1)/mid;


class Solution {
    public int minEatingSpeed(int[] piles, int H) {
        // H 小时内吃完香蕉的最小速度， 我们不访成为speed （我们需要暴力破解 从最小范围试到最大范围）, 请问speed 最大可能为多少， 最小可能为多少？
        // 最小为1， 最大为max(piles) 连续的空间线性搜索 符合条件的最小speed => 显然我们可以用2分算法的思想
        int max = getMax(piles);
        int left = 1; int right = max + 1;
        
        while(left < right){
            int mid = left + (right -left)/2;
            if(canFinish(piles, mid, H)){//[left, mid)
                right = mid;
            }else{// [mid+1,right)
                left = mid + 1;
            }
        }
        
        return left;
    }
    
    private boolean canFinish(int[] piles, int speed ,int H){
        int time = 0;
        for(int n: piles){
           time += (n / speed) + ((n % speed) > 0 ? 1 : 0);
        }
        
        return time <= H;
    }
    
    private int getMax(int[] piles){
        int max = -1;
        
        for(int i = 0; i < piles.length; i++){
            max = Math.max(piles[i], max);
        }
        
        return max;
    }
}
--------------------------------------------------------------------------------------------------------------------------------
1011. Capacity To Ship Packages Within D Days

class Solution {
    public int shipWithinDays(int[] weights, int D) {
        // min: max(weights)
        // max: sum(weights)
        boolean ans = canFinish(weights, 14, D);
        System.out.println(ans);
        //get max and sum
        int max = 0;
        int sum = 0;
        for(int i = 0; i < weights.length; i++){
            max = Math.max(weights[i], max);
            sum += weights[i];
        }
        
        int left = max;
        int right = sum + 1;
        
        while(left < right){
            int mid = left + (right - left)/2;
            
            if(canFinish(weights, mid, D)){ // [left,mid)
                right = mid;
            }else{ // [mid+1, right)
                left = mid+1;
            }
        }
        return left;
    }
    
    private boolean canFinish(int[] w, int cap, int D) {
        int i = 0;
        for (int day = 0; day < D; day++) {
            int maxCap = cap;
            while ((maxCap -= w[i]) >= 0) {
                i++;
                if (i == w.length)
                    return true;
            }
        }
        return false;
    }
}
