Rainbow sort

public class Solution {
    /**
     * @param colors: A list of integer
     * @param k: An integer
     * @return: nothing
     */
    public void sortColors2(int[] colors, int k) {
        // write your code here
        if (colors == null || colors.length == 0) return;

        rainbowSort(colors, 0, colors.length - 1, 1, k);
    }

    void rainbowSort(int[] colors, int start, int end, int colorFrom, int colorTo) {
        if (start >= end) return;
        if (colorFrom >= colorTo) return;

        int midColor = (colorFrom + colorTo) / 2;
        int left = start;
        int right = end;
        while (left <= right) {
            while (left <= right && colors[left] <= midColor) {left++;}
            while (left <= right && colors[right] > midColor) {right--;}
            if (left <= right) {
                int temp = colors[left];
                colors[left] = colors[right];
                colors[right] = temp;
                left++;
                right--;
            }
        }

        rainbowSort(colors, start, right, colorFrom, midColor);
        rainbowSort(colors, left, end, midColor + 1, colorTo);
    }
}



-------------------------------------------------------------------------
912. Sort an Array
//merge sort
class Solution {
    public int[] sortArray(int[] nums) {
        if (nums == null|| nums.length == 0) return new int[0];
        
        return mergeSort(nums, 0, nums.length - 1);
    }
    
    private int[] merge(int[] left, int[] right) {
       int l = 0;
       int r = 0;
       int i = 0;
       int[] res = new int[left.length + right.length];
       while(l < left.length && r < right.length){
            if(left[l] > right[r]){
                res[i] = right[r];
                r++;
            }else{
                res[i] = left[l];
                l++;
            }
           i++;
        }
        while(l < left.length){
            res[i] = left[l];
            l++;
            i++;
        }
        while(r < right.length){
            res[i] = right[r];
            r++;
            i++;
        }

        return res;
    }
    public int[] mergeSort(int[] nums,int startIndex, int endIndex){
       if (endIndex == startIndex)  return new int[]{nums[startIndex]};
       int midIndex = (startIndex + endIndex)/2;
       
       // divide
       int[] left = mergeSort(nums,startIndex,midIndex);
       int[] right = mergeSort(nums,midIndex + 1,endIndex);

      
       return merge(left, right);
    }
}
-------------------------------------------------------------------------------------------------------------------------
// quick sort
public class Solution {
    /**
     * @param A: an integer array
     * @return: nothing
     */
    public void sortIntegers2(int[] A) {
        if (A == null || A.length == 0) return;
        quickSort(A, 0, A.length - 1);
    }
    
    private void quickSort(int[] A, int start, int end) {
        if (start >= end) return;

        int left = start, right = end;
        // 1. pivot, A[start], A[end]
        // get value not index
        int pivot = A[(start + end) / 2];

        // 2. left <= right not left < right
        // why? ending condition of loop is left > right, recursion interval is [start, right] and [left, end], has conflict area. 
        // So will cause stack overflow
        while (left <= right) {
            // 3. A[left] < pivot not A[left <= pivot]
            while (left <= right && A[left] < pivot) {
                left++;
            }
            while (left <= right && A[right] > pivot) {
                right--;
            }
            if (left <= right) {
                int temp = A[left];
                A[left] = A[right];
                A[right] = temp;
                left++;
                right--;
            }
        }
        quickSort(A, start, right);
        quickSort(A, left, end);
    }
}

public class Solution {
    public int kthLargestElement(int k, int[] nums) {
        if (nums == null) {
            return -1;
        }

        return quickSelect(nums, 0, nums.length - 1, k);
    }

    private int quickSelect(int[] nums, int start, int end, int k) {
        if (start == end) return nums[start];

        int i = start, j = end;
        int pivot = nums[(i + j) / 2];

        while (i <= j) {
            while (i <= j && nums[i] > pivot) {
                i++;
            }
            while(i <= j && nums[j] < pivot) {
                j--;
            }
            if (i <= j) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
                j--;
            }
        }
        /*
         * ending loop will have following interval
         * [start.... j][j...i][i...end]
         */

        if (start + k - 1 <= j) {
            return quickSelect(nums, start, j, k);
        }

        if (start + k - 1 >= i) {
            return quickSelect(nums, i, end, k - (i - start));
        }

        return nums[j + 1];
    }
}


Quick Select pattern (Top k pattern)
//414. Third Maximum Number
//215. Kth Largest Element in an Array
//347. Top K Frequent Elements
// iterative version
public int find(int[] arr, int low, int high, int k) { 
     while(low <= high){
        int pivotIndex = r.nextInt(high + 1 -low) + low;
        swap(arr, pivotIndex, high);  
        // find the partition  
        int p = partition(arr,low,high); 
        if(p == k) return arr[p]; // NOTE: while condition low<= high
        if(p > k) high = p-1; // same as binary search [low,p-1] exclude p
        else low = p+1;//same as binary search [p+1,high]
    } 
    return arr[low];
} 
// recursive version
 public int find(int[] arr, int low, int high, int k) { 
    if (low > high) return arr[low];
    int pivotIndex = r.nextInt(high + 1 -low) + low;
    swap(arr, pivotIndex, high);  
    // find the partition  
    int p = partition(arr,low,high); 
    
    if(p == k) return arr[p]; //NOTE: base condition low > high
    if(p < k) return find(arr, p + 1, high, k ); 
    else return find(arr, low, p-1, k );     
} 




//973. K Closest Points to Origin (notes on the quickSelect return type, when dealing with top or lower range, we can try in place sort up to 0 index or up to end index, so return is void)
class Solution {
    Random random = new Random();
    public int[][] kClosest(int[][] points, int K) {
        quickSelect(points, 0, points.length -1,K);
        return Arrays.copyOfRange( points,0,K);
    }
    
    public void quickSelect(int[][] points, int left, int right, int k){
        if(left >= right) return;// NOTE: HERE BASE CASE
        // random pivot
        int pivotIndex = random.nextInt(right + 1 - left) + left;
        swap(points, pivotIndex, right);
        
        // find partition
        int p = partition(points, left, right);

        if(p < k){
            quickSelect(points, p + 1, right, k);
            return;// NOTE: HERE NO RETURN TYPE
        }
        else{
            quickSelect(points, left, p - 1, k);
            return;
        }
    }
    // equivalent iterative version
    public void quickSelect(int[][] points, int left, int right, int k){
        while(left < right){
            // random pivot
            int pivotIndex = random.nextInt(right + 1 - left) + left;
            swap(points, pivotIndex, right);
            // find partition
            int p = partition(points, left, right);
            if(p >= k){
                right = p; //[left,p)
            }else{
                left = p + 1; //[p+1, right)
            }
        }
    }
    
    public int partition(int[][] points, int left, int right){
        int[] pivot = points[right];
        int index = left;
        for(int i = left; i < right; i++){
            if(getPointSize(points[i]) < getPointSize(pivot)){
                swap(points,index,i);
                index ++;
            }
        }
        swap(points, index, right);
        return index;
    }
    
    public int getPointSize(int[] point){
        return point[0]*point[0] + point[1]*point[1];
    }
    
    public void swap(int[][] points, int a, int b){
        int[] temp = points[a];
        points[a] = points[b];
        points[b] = temp;
    }
}

