
BFS
// q is Queue
q.push(start)
step = 0

while not q.empty():
	size = q.size()
	if goal in new_nodes: return step + 1 // STEP + 1 OR STEP DEPENDS ON QUESTIONS
	while size != 0:
		node = q.pop()
		new_nodes = expand(node)
			//nested code block
			// sometimes we also need to check visited condition
			// if(visited) continue;
			
			// visited[new_nodes] = true;
			q.append(new_nodes) 
	++step;
return NOT_FOUND

Bidirectional BFS
// s1 and s2 are both hashSet
s1.insert(start)
s2.insert(end)
step = 0

while not(s1.empty() || s2.empty()):
	++step
	swap(s1,s2)
	s = {}
	for node in s1:
		new_nodes = expand(node)
		if any(new_nodes) in s2: return step + 1
		s.append(new_nodes)
return NOT_FOUND


127. Word Ladder

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Set<String> dict = new HashSet<>(); // number of words have seen so far
        dict.add(beginWord);
        for(String s: wordList){
            dict.add(s);
        }
        
        if(!dict.contains(endWord)) return 0;
        
        int step = 0;
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        while(!queue.isEmpty()){
            ++step;
            int size = queue.size();
            // current level
            for(int i = 0; i < size; i++){
                String curString = queue.poll();
                // find next string
                char [] temp = curString.toCharArray();
                //NOTE: when dealing with string we call.toCharArray(); => convert it back to String use,  String.valueOf(char[])
                for(int j = 0; j < curString.length(); j++){
                    char old = temp[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        temp[j] = c;
                        String newString = String.valueOf(temp);
			            if(!dict.contains(newString)) continue; 
			            if(newString.equals(endWord)) return step + 1;
                        dict.remove(newString);
                        queue.add(newString);
                        
                    }
                    temp[j] = old;
                }   
            }
        }
        return 0;
    }
}

// two end BFS


class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Map<String, Boolean> dict = new HashMap<>();
        for(String s: wordList){
            dict.put(s, false);
        }
        
        if(!dict.containsKey(endWord)) return 0;
        
        int step = 0;
        //Queue<String> queue = new LinkedList<>();
        Set<String> s1 = new HashSet<>();
        Set<String> s2 = new HashSet<>();
        s1.add(beginWord);
        s2.add(endWord);
        while(!s1.isEmpty() && !s2.isEmpty()){
            ++step;
            if(s1.size() > s2.size()){
                swap(s1,s2);
            }
            
            Set s = new HashSet<>();
            
            for(String curString: s1){
                // find next string
                char [] temp = curString.toCharArray();
                for(int j = 0; j < curString.length(); j++){
                    char old = temp[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        temp[j] = c;
                        String newString = String.valueOf(temp);
                        if(!dict.containsKey(newString) || dict.get(newString)) continue;
                        if(s2.contains(newString)) return step+1;  
                        dict.put(newString,true);
                        
                        s.add(newString);
                    }
                    temp[j] = old;
                }  
            }
            s1 = s;
        }
        return 0;
    }
    
    void swap(Set<String> s1, Set<String> s2){
        Set<String> temp = s1;
        s1 = s2;
        s2 = temp;
    }
}


END 127. Word Ladder
-----------------------------------------------------------------------------------------------------------------------------
1、一般的 BFS 算法，是从一个起点 start 开始，向终点 target 进行寻路，但是拼图问题不是在寻路，而是在不断交换数字，这应该怎么转化成 BFS 算法问题呢？
2、即便这个问题能够转化成 BFS 问题，如何处理起点 start 和终点 target？它们都是数组哎，把数组放进队列，套 BFS 框架，想想就比较麻烦且低效。
首先回答第一个问题，BFS 算法并不只是一个寻路算法，而是一种暴力搜索算法，只要涉及暴力穷举的问题，BFS 就可以用，而且可以最快地找到答案。
对于第二个问题，我们这里的 board 仅仅是 2x3 的二维数组，所以可以压缩成一个一维字符串。其中比较有技巧性的点在于，二维数组有「上下左右」的概念，
压缩成一维后，如何得到某一个索引上下左右的索引？

773. Sliding Puzzle
class Solution {
    public int slidingPuzzle(int[][] board) {
        int row = board.length;
        int col = board[0].length;
//         List<List<Integer>> neibors = Arrays.asList(
//             Arrays.asList( 1, 3 ),
//             Arrays.asList( 0, 4, 2 ),
//             Arrays.asList( 1, 5),
//             Arrays.asList( 0, 4),
//             Arrays.asList( 1, 3, 5),
//             Arrays.asList( 4, 2)
//         );
        
        StringBuilder sb = new StringBuilder();
        
        // construct into string
        int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};

        List<Integer>[] neibors = new List[row*col]; 
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                sb.append(board[i][j]);
		
		//NOTE: MAPPING two D array into one D
                // mapping neibors , this can be used in n by m board, int this case 2 by 3
                for(int[] dir: dirs){
                    int newI = dir[0] + i;
                    int newJ = dir[1] + j;
                    if(newI == row || newJ == col || newI < 0 || newJ <0) continue;
                    if(neibors[col * i + j] == null){
                        neibors[col * i + j] = new ArrayList<>();
                    }
                    neibors[col * i + j].add(col * newI + newJ);  
                }
            }
        }
        
        
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        String start = sb.toString();
        String target = "123450";
        queue.add(start);
        visited.add(start);
        
        
        Map<String,Integer> level = new HashMap<>();// for output shortest Path
        Map<String, String> parent = new HashMap<>();// for output shortest Path
        
        
        int step = 0;
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k = 0; k < size; k++){
                String curString = queue.poll();
		
                // find the goal
                if(curString.equals(target)){
                    findShortestPath(level,parent,target,start);// for output shortest Path
                    return step; 
                }
                
                // find index with 0 in curString
                int idx = curString.indexOf("0");
                
                for(int dir: neibors[idx]){
                    String new_board = curString;
                    new_board = swap(new_board, idx, dir);
                    // 防止走回头路
                    if(visited.contains(new_board)) continue;
                    queue.add(new_board);
                    
                    level.put(new_board,step); // for output shortest Path
                    parent.put(new_board,curString);// for output shortest Path
                    
                    visited.add(new_board);
                }
            }
            step++;
        }
        
        return -1;
    }
    
    private List<String> findShortestPath(Map<String,Integer> level, Map<String, String> parent, String target,String start){
        List<String> path = new ArrayList<>();
        //System.out.println(level);
        //System.out.println(parent);
        String cur = target;
        path.add(target);
        while(parent.containsKey(cur) && !cur.equals(start)){
            cur = parent.get(cur);
            path.add(cur);
        }
        System.out.println(path);
        return path;
    }
    
    private String swap(String str, int i, int j) {
        StringBuilder sb = new StringBuilder(str);
        sb.setCharAt(i, str.charAt(j));
        sb.setCharAt(j, str.charAt(i));
        return sb.toString();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------

