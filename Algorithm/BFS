
BFS
// q is Queue
q.push(start)
step = 0

while not q.empty():
	size = q.size()
	if goal in new_nodes: return step + 1 // STEP + 1 OR STEP DEPENDS ON QUESTIONS
	while size != 0:
		node = q.pop()
		new_nodes = expand(node)
			//nested code block
			// sometimes we also need to check visited condition
			// if(visited) continue;
			
			// visited[new_nodes] = true;
			q.append(new_nodes) 
	++step;
return NOT_FOUND

Bidirectional BFS
// s1 and s2 are both hashSet
s1.insert(start)
s2.insert(end)
step = 0

while not(s1.empty() || s2.empty()):
	++step
	swap(s1,s2)
	s = {}
	for node in s1:
		new_nodes = expand(node)
		if any(new_nodes) in s2: return step + 1
		s.append(new_nodes)
return NOT_FOUND


127. Word Ladder

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Set<String> dict = new HashSet<>();
        for(String s: wordList){
            dict.add(s);
        }
        
        if(!dict.contains(endWord)) return 0;
        
        int step = 0;
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        while(!queue.isEmpty()){
            ++step;
            int size = queue.size();
            // current level
            for(int i = 0; i < size; i++){
                String curString = queue.poll();
                // find next string
                char [] temp = curString.toCharArray();
                for(int j = 0; j < curString.length(); j++){
                    char old = temp[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        temp[j] = c;
                        String newString = String.valueOf(temp);
			if(!dict.contains(newString)) continue; //if(!map.containsKey(newString) || map.get(newString)) continue;
			if(newString.equals(endWord)) return step+1;
                        dict.remove(newString);// map.put(newString,true);
                        queue.add(newString);
                        
                    }
                    temp[j] = old;
                }   
            }
        }
        return 0;
    }
}

// two end BFS


class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Map<String, Boolean> dict = new HashMap<>();
        for(String s: wordList){
            dict.put(s, false);
        }
        
        if(!dict.containsKey(endWord)) return 0;
        
        int step = 0;
        //Queue<String> queue = new LinkedList<>();
        Set<String> s1 = new HashSet<>();
        Set<String> s2 = new HashSet<>();
        s1.add(beginWord);
        s2.add(endWord);
        while(!s1.isEmpty() && !s2.isEmpty()){
            ++step;
            if(s1.size() > s2.size()){
                swap(s1,s2);
            }
            
            Set s = new HashSet<>();
            
            for(String curString: s1){
                // find next string
                char [] temp = curString.toCharArray();
                for(int j = 0; j < curString.length(); j++){
                    char old = temp[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        temp[j] = c;
                        String newString = String.valueOf(temp);
                        if(!dict.containsKey(newString) || dict.get(newString)) continue;
                        if(s2.contains(newString)) return step+1;  
                        dict.put(newString,true);
                        
                        s.add(newString);
                    }
                    temp[j] = old;
                }  
            }
            s1 = s;
        }
        return 0;
    }
    
    void swap(Set<String> s1, Set<String> s2){
        Set<String> temp = s1;
        s1 = s2;
        s2 = temp;
    }
}


END 127. Word Ladder
-----------------------------------------------------------------------------------------------------------------------------

773. Sliding Puzzle

class Solution {
    public int slidingPuzzle(int[][] board) {
        List<List<Integer>> neibors = Arrays.asList(
            Arrays.asList( 1, 3 ),
            Arrays.asList( 0, 4, 2 ),
            Arrays.asList( 1, 5),
            Arrays.asList( 0, 4),
            Arrays.asList( 1, 3, 5),
            Arrays.asList( 4, 2)
        );
        
        StringBuilder sb = new StringBuilder();
        
        // construct into string
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                sb.append(board[i][j]);
            }
        }
        
        
        Set<String> visited = new HashSet<>();
        Queue<String> queue = new LinkedList<>();
        String start = sb.toString();
        String target = "123450";
        queue.add(start);
        visited.add(start);
        
        int step = 0;
        
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k = 0; k < size; k++){
                String curString = queue.poll();
                
                // find the goal
                if(curString.equals(target)){
                    return step; 
                }
                
                // find index with 0 in curString
                int idx = curString.indexOf("0");
                
                for(int dir: neibors.get(idx)){
                    String new_board = curString;
                    new_board = swap(new_board, idx, dir);
                    // 防止走回头路
                    if(visited.contains(new_board)) continue;
                    queue.add(new_board);
                    visited.add(new_board);
                }
            }
            step++;
        }
        return -1;
    }
    
    private String swap(String str, int i, int j) {
        StringBuilder sb = new StringBuilder(str);
        sb.setCharAt(i, str.charAt(j));
        sb.setCharAt(j, str.charAt(i));
        return sb.toString();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------

