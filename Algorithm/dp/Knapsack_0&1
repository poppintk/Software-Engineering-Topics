
class Knapsack {
  static int solveKnapsack(int[] profits, int[] weights, int capacity) {
    //TODO: Write - Your - Code
    //state: capacity, number of items
    // dp[i][w]: maxiumum profit of given weight and up to i items
    // recurrance relation:
    // dp[i][j] = Math.max(choose, notChoose);
    // => dp[i][j] = Math.max(profits[i-1]+ dp[i-1][j - weights[i-1]], dp[i-1][j]);

    int[][] dp = new int[profits.length+1][capacity+1];
    //base case
    for(int g = 0; g < dp.length;g++){
      dp[0][g] = 0;
      dp[g][0] = 0;
    }

    for(int i = 1; i < dp.length; i++){
      for(int j = 1; j < capacity+1;j++){
        if (j - weights[i-1] < 0) { // edge case
            // 这种情况下只能选择不装入背包
            dp[i][j] = dp[i - 1][j];
        } else {
            dp[i][j] = Math.max(
              // profits[i-1] due to i start from 1 not 0
              profits[i-1] + dp[i-1][j - weights[i-1]],
              dp[i-1][j]
            );
        }
      }
    }

    return dp[weights.length][capacity];
  }
}
