70. Climbing Stairs

class Solution {
    public int climbStairs(int n) {
        // dp[i] : total number of steps to reach to the i
        int[] dp = new int[n+1];
        
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i = 2; i < dp.length; i++){
            // the choice we have is climb 1 or 2
             // we have two base case due to choice
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}
------------------------------------------------------------------------------------------------------------------------
746. Min Cost Climbing Stairs

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        // state: number of stairs
        // dp[i]: minCostClimbingStars at stair ith
        // choice: 1th or 2th
        // base case: 
        
        int[] dp = new int[cost.length+1];
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i = 2; i < dp.length;i++){
            int costV = (i == cost.length) ? 0: cost[i];
            dp[i] = Math.min(dp[i-2], dp[i-1]) + costV;
        }
        return dp[cost.length];
    }
}
------------------------------------------------------------------------------------------------------------------------
509. Fibonacci Number
class Solution {
    public int fib(int N) {
        // state N
        // dp[i]: fib number on ith 
        // choice: n-2 + n-1 => dp[n] = dp[n-2]+dp[n-1]
        // base case:
        if(N == 0) return 0;
        if(N == 1) return 1;
        
        int[] dp = new int[N+1];
        dp[0] = 0;
        dp[1] = 1;
        
        for(int i = 2; i < dp.length;i++){
            dp[i] = dp[i-2] + dp[i-1];
        }
        return dp[N];
    }
}
------------------------------------------------------------------------------------------------------------------------
1137. N-th Tribonacci Number
class Solution {
    public int tribonacci(int n) {
        // state: n
        // dp[i]: tribon number at ith
        // choice: n-1, n-2, n-3 => dp[i] = dp[i-1]+ dp[i-2] + dp[i-3]
        // base:
        
        if(n == 0) return 0;
        if(n == 1 || n == 2) return 1;
        
        int[] dp = new int[n+1];
        
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 1;
        
        for(int i = 3; i < dp.length; i++){
            dp[i] = dp[i-1]+ dp[i-2] + dp[i-3];
        }
        
        return dp[n];
    }
}

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
