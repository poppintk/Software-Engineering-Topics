300. Longest Increasing Subsequence(nlogn better way, but this is n^2 approch)
class Solution {
    public int lengthOfLIS(int[] nums) {
        // state: index
        // dp[i]: length of longest increasing up to index i
        // choice: 
        // if (nums[i] > nums[j]) 
        //  dp[i] = Math.max(dp[i], dp[j] + 1);
        //base case:
        // dp 数组应该全部初始化为 1，因为子序列最少也要包含自己，所以长度最小为 1.
        // base case already inside
        int[] dp = new int[nums.length];
        Arrays.fill(dp,1);
        for(int i = 0; i < dp.length; i++){
            for(int j = 0; j < i; j++){
                if(nums[i] > nums[j]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        
        int ans = 0;
        for(int k = 0; k < dp.length; k++){
            ans = Math.max(dp[k], ans);
        }
        
        return ans;
    }
}

-----------------------------------------------------------------------------------------------------------------------
53. Maximum Subarray

int maxSubArray(int[] nums) {
    int n = nums.length;
    if (n == 0) return 0;
    int[] dp = new int[n];
    // base case
    // 第一个元素前面没有子数组
    dp[0] = nums[0];
    // 状态转移方程
    for (int i = 1; i < n; i++) {
        dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);
    }
    // 得到 nums 的最大子数组
    int res = Integer.MIN_VALUE;
    for (int i = 0; i < n; i++) {
        res = Math.max(res, dp[i]);
    }
    return res;
}

-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------
