序列型
大多數表現為 當前i和前面i-1 存在某種聯係的序列
dp[i] 表示前1個元素a[0]...a[i-1]的某種性質
int[] dp = new int[n + 1];

--------------------------------------------------
雙序列/匹配型
设f[i][j]为A前i个字符A[0..i-1]和B前j个字符[0..j-1]的某種性質
int[][] dp = new dp[n + 1][m + 1];


---------------------------------------------------

區間型
給定一個字符串/序列，進行去頭去尾的操作
dp[i][j] 表示對子序列[i.....j] 的最優性質
int[][] dp = new int[n][n];

是唯一不靠recurrence equation來判斷loop方向， 用區間 len = 1，2，3，。。。

--------------------------------------------------
接龍型
longest increasing subsequence
dp[j] = 以a[j]結尾的最長上升子序列的長度
dp[j] = max{1, dp[i] + 1 | i < j and a[i] < a[j]}
為坐標
int[] dp = new int[n];
-------------------------------------------------
劃分型
給定長度為N的序列或字符串， 要求劃分成若干段
-段數大小不限
-段數不限，或指定k段
-每一段滿足一定的性質
dp[i][j] 記錄前i個元素分成j段的性質， 如最小代價
---------------------------------------------
博弈
第一步
dp[i]表示當前玩家面對i個物品，是否會勝利
boolean[] dp = new booelan[n + 1]
----------------------------------------------
背包問題
dp[i][w] 前i個物品 重量w
dp = new int/boolean[n + 1][w + 1]


-------------------------------------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=j4eab7N3Hfs

62. Unique Paths
70. Climbing Stairs
509. Fibonacci Number
91. Decode Ways


When recursion alone O(2^n) won’t work

Counting - 有多种方法

Optimization- 最优解

DP VS Memorization

DP requirements:
-optimal substrutura
	- can be solved optimally by breaking it into sub-problems and then recursively find the optimal solutions to the sub-problems

- overlapping sub-problems
	- sub-problems are overlapped such that we can compute only once and store the solution for future use
	- recuse time complexity(Exponential to ploynomial)
	- if sub-problems do not overlap -> divide and conquer

- No-after effect
	- the optimal solution of a subproblem will not change when it was used to solve a bigger problem optimally


Top-down
	recursion with memoization
Bottom-up
	DP

Algorithms that use DP;
Fibonacci sequence
LCS
Knapsack
Floyd-Warshall
Bellman-Ford

Templates
 Dp = … # create dp array
		# add padding if needed
Dp[0][0] = …. # init dp array
			# base cases

For I …
	for j …
		….
		dp[i][j] = … # transition

Return dp[n][m]

Recursion with memorization

Mem = …. # create mem dict

Def dp(i, j , ….):
	if base_case(I,j): return … #base case
	if(I,j) not in men:
		mem[(i,j)] = …
	return mem[(I,j)]

Return dp(n,m)


动态规划，需要穷举（动态规划的穷举有点特别，因为这类问题存在「重叠子问题」）
穷举动态规划-> 正确的「状态转移方程」

思考状态转移方程：
明确【状态】 -> 定义DP数组/函数的含义 -> 明确【选择】 -> 明确base case

动态规划问题最困难的就是写出状态转移方程，即这个暴力解。

1） 确定状态， 也就是原问题和字问题中变化的变量。 

2）确定dp函数的定义： 当前的目标金额是n, 至少需要 dp(n) 个硬币凑出 该金额

3）确定【选择】并择优， 也就是对于每个状态， 可以做出什么选择改变当前状态。 投硬币问题的选择就是， 从面额列表coins 中选者一个硬币，然后目标金额就会减少。
Note: 通过前面步骤 我们可以得到状态转移方程 

4) 通过转移方程，我们可以得出最终解的位置

5) 以及通过分析最终解采取什么样的loop方式 

6) 也可以通过状态转移 推出base case, 明确base case, 显然目标金额为0时，所需要硬币数量为0； 当目标金额小于0时， 无解，返回-1；

------------------------------------------------------------------------------------------------------------------------
70. Climbing Stairs

class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n+1];
        //return recurse(n, dp);
        return iterative(n);
    }
    public int iterative(int n){
        int[] dp = new int[n+1]; // Note: we need n + 1 size
        dp[0] = 1;// base case
        dp[1] = 1;// base case   
        for(int i = 2; i <= n; i++){ // Note: including n
            dp[i] = dp[i-2] + dp[i-1];
        }
        return dp[n];
    }
    public int recurse(int n, int[] dp){
        if(n == 0 || n == 1) return 1;
        if(dp[n] != 0) return dp[n];
        dp[n] = recurse(n - 1, dp) + recurse(n - 2, dp);       
        return dp[n];
    }
}

END 70. Climbing Stairs
------------------------------------------------------------------------------------------------------------------------
198. House Robber
class Solution {
    public int rob(int[] nums) {
        return iterative(nums);
//         int[] dp = new int[nums.length];
//         for(int i = 0; i < nums.length; i++){
//             dp[i] = -1;
//         }
//         if(nums.length == 0) return 0;
//         return recurse(nums, nums.length - 1, dp);
    }
    
    public int iterative(int[] nums){
        if(nums.length == 0) return 0;
        if(nums.length == 1) return nums[0];
        int[] dp = new int[nums.length];
        
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i++){
            dp[i] = Math.max(dp[i-2] + nums[i], dp[i-1]);
        }
        return dp[nums.length-1];
    }
    
    public int recurse(int[] nums, int i, int[] dp){
        if(i == 0) return nums[i];
        if(i == 1) return Math.max(nums[i-1], nums[i]);
        
        if(dp[i] != -1) return dp[i];
        // 做选择
        dp[i] = Math.max(recurse(nums, i - 2, dp) + nums[i], recurse(nums, i - 1, dp));
        
        return dp[i];
    }
}
END 198. House Robber
------------------------------------------------------------------------------------------------------------------------
746. Min Cost Climbing Stairs

class Solution {
    int[] dp;
    public int minCostClimbingStairs(int[] cost) {
        // Note: THE TOP HAS NO COST
        int n = cost.length;
        dp = new int[n+1];
        // recurse1(cost,n-1);
        // return Math.min(dp[n-1],dp[n-2]);
        return recurse2(cost, n);
    }
    
    // definition: minmimum cost to step n (including cost on n)
    private int recurse1(int[] cost, int n) {
        if (n==0 || n==1) return cost[n];
        if (dp[n] != 0) return dp[n];
        dp[n] = cost[n] + Math.min(recurse1(cost, n-1), recurse1(cost, n-2));
        return dp[n];
    }
    
    // definition: minmimum cost to step n (excluding cost on n)
    private int recurse2(int[] cost, int n){
        if (n==0 || n==1) return 0;
        if (dp[n] > 0) return dp[n];
        dp[n] = Math.min(recurse2(cost, n-1) + cost[n-1], recurse2(cost, n-2) + cost[n-2]);
        return dp[n];
    }
}

END 746. Min Cost Climbing Stairs
------------------------------------------------------------------------------------------------------------------------
322. Coin Change

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        //return recurse(coins, amount, dp);
        return iterative(coins, amount);
    }
    
    public int recurse(int[] coins, int amount, int[] dp){
        if(amount == 0){
            return 0;
        }
        // 定点染色， 用在有不同return value 比如找不到return -1;
        if(amount < 0){
            return -1;
        }
        if(dp[amount] != Integer.MAX_VALUE) return dp[amount];
        
        //做选择
        int ways = Integer.MAX_VALUE;
        for(int c: coins){
            int res = recurse(coins, amount - c, dp);
            if(res == -1) continue; //判断是不是顶点染色找不到那个case
            ways = Math.min(res + 1, ways);
        }
        
        dp[amount] = ways == Integer.MAX_VALUE ? -1 : ways;
        return dp[amount];
    }
    
    public int iterative(int[] coins, int amount){
        int[] dp = new int[amount+1];
        Arrays.fill(dp, amount+1); // can not use Integer_MAX due to overflow
        // base case
        dp[0] = 0;
        for (int i = 0; i < dp.length; i++) {
            // 内层 for 在求所有子问题 + 1 的最小值
            for (int coin : coins) {
                // 子问题无解，跳过
                if (i - coin < 0) continue;
                dp[i] = Math.min(dp[i], 1 + dp[i - coin]);// 1+ Max_value will overflow
            }
        }
        return (dp[amount] == amount + 1) ? -1 : dp[amount];
    }
}
END 322. Coin Change
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
