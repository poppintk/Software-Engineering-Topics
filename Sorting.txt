
912. Sort an Array
//merge sort
class Solution {
    public int[] sortArray(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
    // note: startIndex, endIndex
    public int[] mergeSort(int[] nums,int startIndex, int endIndex){

       if (endIndex == startIndex)  return new int[]{nums[startIndex]};
       int midIndex = (startIndex + endIndex)/2;
       
       // divide
       int[] left = mergeSort(nums,startIndex,midIndex);
       int[] right = mergeSort(nums,midIndex + 1,endIndex);

       // merge
       int l = 0;
       int r = 0;
       int i = 0;
       int[] res = new int[left.length + right.length];
       while(l < left.length && r < right.length){
            if(left[l] > right[r]){
                res[i] = right[r];
                r++;
            }else{
                res[i] = left[l];
                l++;
            }
           i++;
        }
        while(l < left.length){
            res[i] = left[l];
            l++;
            i++;
        }
        while(r < right.length){
            res[i] = right[r];
            r++;
            i++;
        }
        return res;
    }

// quick sort
class QuickSort { 
    Random random = new Random();
 
    void sort(int arr[], int low, int high){ 
        if(low >= high) return;
        // ramdomized
        int pivotIndex = random.nextInt(high + 1 -low) + low; (inclusive high and low)
        swap(arr, pivotIndex, high);
        // find the partition  
        int pi = partition(arr, low, high); // edge case: low + 1 = high , must have two element in arr at least
        sort(arr, low, pi-1); //note: not includes pi
        sort(arr, pi+1, high); //note: not includes pi

    }
  }
  // kth statistical element
  public static int kthSmallest(int[] arr, int low, int high, int k) { 
        if (low > high) return Integer.MAX_VALUE;
        // ramdomized
        int pivotIndex = random.nextInt(high + 1 -low) + low;(inclusive high and low)
        swap(arr, pivotIndex, high);  
        
        // find the partition  
        int p = partition(arr,low,high); 
  
        // if partition value is equal to the kth position,  
        // return value at k. 
        if(partition == k)// NOTE: HERE
            return arr[partition];     
        // if partition value is less than kth position, 
        // search right side of the array. 
        else if(partition < k ) 
            return kthSmallest(arr, partition + 1, high, k ); 
              
        // if partition value is more than kth position,  
        // search left side of the array. 
        else
            return kthSmallest(arr, low, partition-1, k );          
    } 
    
    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
    
    // NOTE: This function does not garrantee that elements before pivot element is in sorted order
    // only garrantee that everything before pivot is less than pivot
    public int partition(int arr[], int low, int high) { 
        int pivot = arr[high];
        int i = low; // keep tracking of first element which >= pivot
        for (int j=low; j < high; j++){ 
            // If current element is smaller than the pivot 
            if (arr[j] < pivot) { 
                // swap arr[i] and arr[j] 
                swap(arr,i,j);
                i++;
            } 
        } 
        // Note: index i will be latest i which >= pivot
        // swap arr[i] and arr[high] (or pivot) 
        swap(arr, i,high);
        return i; 
    } 
}


Quick Select pattern
NOTE: not working in case array has duplicated value, and that duplicated value consider as one order statistic 414. Third Maximum Number
//215. Kth Largest Element in an Array
// iterative version
public int find(int[] arr, int low, int high, int k) { 
    while(low <= high){
        int pivotIndex = r.nextInt(high + 1 -low) + low;
        swap(arr, pivotIndex, high);  
        // find the partition  
        int p = partition(arr,low,high); 
        if(p == k) return arr[p]; 
        else if(p < k) low = p+1;
        else high = p-1;
    } 
    return Integer.MAX_VALUE;
} 
// recursive version
 public int find(int[] arr, int low, int high, int k) { 
    if (low > high) return Integer.MAX_VALUE;
    int pivotIndex = r.nextInt(high + 1 -low) + low;
    swap(arr, pivotIndex, high);  
    // find the partition  
    int p = partition(arr,low,high); 
    
    if(p == k) return arr[p]; 
    else if(p < k) return find(arr, p + 1, high, k ); 
    else return find(arr, low, p-1, k );     
} 



//973. K Closest Points to Origin (notes on the quickSelect return type, when dealing with top or lower range, we can try in place sort up to 0 index or up to end index, so return is void)
class Solution {
    Random random = new Random();
    public int[][] kClosest(int[][] points, int K) {
        quickSelect(points, 0, points.length -1,K);
        return Arrays.copyOfRange( points,0,K);
    }
    
    public void quickSelect(int[][] points, int left, int right, int k){
        if(left >= right) return;// NOTE: HERE BASE CASE
        // random pivot
        int pivotIndex = random.nextInt(right + 1 - left) + left;
        swap(points, pivotIndex, right);
        
        // find partition
        int p = partition(points, left, right);

        if(p < k){
            quickSelect(points, p + 1, right, k);
            return;// NOTE: HERE NO RETURN TYPE
        }
        else{
            quickSelect(points, left, p - 1, k);
            return;
        }
    }
    // equivalent iterative version
    public void quickSelect(int[][] points, int left, int right, int k){
        while(left < right){
            // random pivot
            int pivotIndex = random.nextInt(right + 1 - left) + left;
            swap(points, pivotIndex, right);
            // find partition
            int p = partition(points, left, right);
            if(p < k){
                left = p + 1;
            }else{
                right = p - 1;
            }
        }
    }
    
    public int partition(int[][] points, int left, int right){
        int[] pivot = points[right];
        
        int index = left;
        for(int i = left; i < right; i++){
            if(getPointSize(points[i]) < getPointSize(pivot)){
                swap(points,index,i);
                index ++;
            }
        }
        swap(points, index, right);
        return index;
    }
    
    public int getPointSize(int[] point){
        return point[0]*point[0] + point[1]*point[1];
    }
    
    public void swap(int[][] points, int a, int b){
        int[] temp = points[a];
        points[a] = points[b];
        points[b] = temp;
    }
}

