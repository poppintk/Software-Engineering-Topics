Normalization
  one to one 
    can use foreigh key to refer to another table primary key and with unique constraint on foreigh key

  one to many 
    usually use foreign key to refer to another table primary key
    Note: one to many, the table on the "many" side  will store the foreign key 

  one to one
    use the intermedia table to foreign key refer to other primary keys

  Pros: will have less duplicated information on columns
  Cons: require extrat time to perform the join
  
Denormalization
  compose everything together 
  Cons: will have duplicated information on Columns
  Pros: no need to join
  
  
  
Index
  Pros: depends on the use case to add the index for better query performance
  Cons: slower writing speed and more space for storing index data structure
  
  multiple column index
  
  
  
Optimistic locking vs Pessimistic locking
  both can solve race condition
  Optimistic use version control, so it is great for read more scenerio
  Pessimistic use locking, due to locking will blocking other operation, it is not great for reading. it is great for write more scenerio
  
  
Sharding
  - How you query the data, then how you decide the sharding key (Tables requires normalized)
  - Can use shardingProxy to sharding the database, Note that sharding detail are transparent to all services
  
  
