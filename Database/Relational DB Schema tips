Normalization
  one to one 
    can use foreigh key to refer to another table primary key and with unique constraint on foreigh key

  one to many 
    usually use foreign key to refer to another table primary key
    Note: one to many, the table on the "many" side  will store the foreign key 

  one to one
    use the intermedia table to foreign key refer to other primary keys

  Pros: will have less duplicated information on columns
  Cons: require extrat time to perform the join
  
Denormalization
  compose everything together 
  Cons: will have duplicated information on Columns
  Pros: no need to join
    
Optimistic locking vs Pessimistic locking
  both can solve race condition
  Optimistic use version control, so it is great for read more scenerio
  Pessimistic use locking, due to locking will blocking other operation, it is not great for reading. it is great for write more scenerio

################################################################
Performance Optimaize
  1) Index
    Pros: depends on the use case to add the index for better query performance
    Cons: slower writing speed and more space for storing index data structure

    multiple column index
    
  2) Table Partitioning and Sharding  
  Table Vertical Partitioning 
    - Vertical partitioning goes beyond Normalization and partitions columns even when already normalized.
    - split table base on frequently used.
    - increase the a bit query performance. When locking the hot talbes and keep minimal impact on other tables
    
  Vertical Sharding base on functionality
    - Split database base on functionality
    - increase abit I/O
    
  Horizontally Sharding
    - How you query the data, then how you decide the sharding key (Tables requires normalized)
    - increase huge I/O QPS
  
  
  Table Horizontal partitioning
    Pros: Smaller tables, smaller indexes, lower query latency
    Cons: intrusive as application needs changes to write to the correct partition. If the number of partitions is out-grown, you have the same issue with the partitions.
      AFAIK full re-partitioning would be needed to increase the partition count. Certainly a non-trivial activity.

  Note: Can use shardingProxy to Horizontal Sharding and Table Horizontal partitioning, Note that sharding detail are transparent to all services
